runApp('app')
method = "Coherence_L1"
uregion_list <<- readRDS(file.path("./data",method,"uregion_list.Rda"))
utrial_list <<- readRDS(file.path("./data",method,"utrial_list.Rda"))
ufreq_list <<- readRDS(file.path("./data",method,"ufreq_list.Rda"))
tbl_beh <<- readRDS(file.path("./data",method,"tbl_beh.Rda"))
uregion_list_L1 <<- readRDS(file.path("./data",method,"uregion_list.Rda"))
utrial_list_L1 <<- readRDS(file.path("./data",method,"utrial_list.Rda"))
ufreq_list_L1 <<- readRDS(file.path("./data",method,"ufreq_list.Rda"))
tbl_beh_L1 <<- readRDS(file.path("./data",method,"tbl_beh.Rda"))
method = "Coherence_L2"
uregion_list_L2 <<- readRDS(file.path("./data",method,"uregion_list.Rda"))
utrial_list_L2 <<- readRDS(file.path("./data",method,"utrial_list.Rda"))
ufreq_list_L2 <<- readRDS(file.path("./data",method,"ufreq_list.Rda"))
tbl_beh_L2 <<- readRDS(file.path("./data",method,"tbl_beh.Rda"))
View(tbl_beh_L1)
C = data.frame(tbl_beh_L1$Gruppe, tbl_beh_L1$ID)
C = data.frame(tbl_beh_L1$Gruppe, tbl_beh_L1$ID, tbl_beh_L2$ID, tbl_beh_L2$Gruppe)
View(C)
View(C)
data_L2 = readRDS(file.path("./data", "Coherence_L2", "tbl_data.Rda"))
data_L1 = readRDS(file.path("./data", "Coherence_L1", "tbl_data.Rda"))
data_L1[1,1,2,3,5]
data_L2[1,1,2,3,5]
data_L2[1,2,2,3,5]
data_L1[1,2,2,3,5]
data_L1[1,2,3,3,5]
data_L3[1,2,3,3,5]
data_L2[1,2,3,3,5]
data_L2[1,2,3,3,5]
source("./data/functions/get_data.R")
source("./functions/get_data.R")
g1_L1 <- get_data_group(data_L1, "Group0", beh = tbl_beh_L1, method = "Coherence")
g1_L2 <- get_data_group(data_L2, "Group0", beh = tbl_beh_L2, method = "Coherence")
m_L1 <- apply(g1_L1, c(2,3,4,5),mean)
m_L2 <- apply(g1_L2, c(2,3,4,5),mean)
m_L1[1,2,3,4]
m_L2[1,2,3,4]
beh_tbl_L1$Gruppe
tbl_beh_L1$Gruppe
tbl_beh_L2$Gruppe
b1 = tbl_beh_L1
b2 = tbl_beh_L2
b1[b1$Gruppe == 0]
b1g0 = b1[b1$Gruppe == 0]
b2g0 = b1[b2$Gruppe == 0]
View(b1g0)
b1g0 = b1[b1$Gruppe == 0,]
View(b1)
View(b1)
View(b2)
View(b2)
View(b1g0)
c = b1$Gruppe==0
View(C)
View(C)
View(C)
d = b1$Gruppe==0
View(d)
View(b1)
View(b2)
View(b1)
View(b2)
F = read.csv("./preprocessing/export_table_freq.csv", header = TRUE, sep = ',', check.names = FALSE)
View(`F`)
b1
View(b1)
View(b2)
View(b1)
F1g0 = F[b1$Gruppe == 0,]
F2g0 = F[b2$Gruppe == 0,]
F[1:24,1,1,1]
F[1,1,1,1]
f1_L2 <- get_data_group(dataF_L2, "Group0", beh = tbl_beh_L2, method = "Coherence")
View(`F`)
View(b1g0)
Fpre <- perform_preprocessing(b1,F,"tmp1", sdf)
F = read.csv("./preprocessing/export_table_freq.csv", header = TRUE, sep = ',', check.names = FALSE)
start_time <- Sys.time(); F = read.csv("./preprocessing/export_table_freq.csv", header = TRUE, sep = ',', check.names = FALSE); cat(Sys.time()-start_time)
start_time <- Sys.time(); Fx = scan("./preprocessing/export_table_freq.csv", header = TRUE, sep = ',', check.names = FALSE); cat(Sys.time()-start_time)
library(data.table)
start_time <- Sys.time(); Fx = fread("./preprocessing/export_table_freq.csv", header = TRUE, sep = ','); cat(Sys.time()-start_time)
View(Fx)
start_time <- Sys.time(); Fx = fread("./preprocessing/export_table_freq.csv", header = TRUE, sep = ',', check.names = FALSE); cat(Sys.time()-start_time)
start_time <- Sys.time(); CohT = fread("./preprocessing/export_table_coh.csv", header = TRUE, sep = ',', check.names = FALSE); cat(Sys.time()-start_time)
C_L1 <- perform_preprocessing(b1,CohT,"tmp1")
a1 = c(1, 2, 3, 4, 5)
a2 = c(6, 7, 8, 9, 10)
a3 = c(11, 12, 13, 14, 15)
aframe = data.frame(a1, a2, a3)
avector <- as.vector(aframe['a2'])
class(avector)
avector <- aframe[['a2']]
class(avector)
avector <- aframe[,2]
class(avector)
c(4,5,6,6)
class(c(4,5,6,6))
id_coh = CohT[['ID']]
id_beh = tbl_beh[['ID']]
id_coh
id_beh
id_beh = tbl_beh_L2[['ID']]
id_beh
B = read.csv("./preprocessing/table_behavioral_tmp.csv", header = TRUE, sep = ',', check.names = FALSE)
View(b1)
B = read.csv("./preprocessing/table_behavioral_tmp.csv", header = TRUE, sep = ',', check.names = FALSE)
B = read.csv("./preprocessing/table_behavioral_tmp.csv", header = TRUE, sep = ';', check.names = FALSE)
B = read.csv("./preprocessing/table_behavioral_tmp.csv", header = TRUE, sep = '|', check.names = FALSE)
tbl_beh_tmp <- B[B$ID %in% CohT$ID]
View(B)
tbl_beh_tmp <- B[B$ID %in% CohT$ID]
View(tbl_beh_tmp)
match(CohT, tbl_beh_tmp)
match(CohT$ID, tbl_beh_tmp$ID)
CohT$ID
bm <- tbl_beh_tmp[match(CohT$ID, tbl_beh_tmp$ID),]
View(bm)
library(shiny)
runApp('app')
library(shiny)
runApp('app')
library(shiny)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
library(rjson)
data = fromJSON(file = "./prepro/CoherenceSt/export_conn_coh.json")
if (is.null(data)){ data = fromJSON(file = "./prepro/CoherenceSt/export_conn_coh.json")}
if (data$type=="conn_coh"){method = "Coherence"}
else if (data$type=="conn_coh"){method = "Transferentropy"}
#cat(file = stderr(), "entering perform_preprocessing with method = ")
#cat(file = stderr(), method)
#cat(file = stderr(), "\n")
#cat(file = stderr(), paste0("getwd()=",getwd(), "\n"))
data = NULL
if (is.null(data)){ data = fromJSON(file = "./prepro/CoherenceSt/export_conn_coh.json")}
if (data$type=="conn_coh"){method = "Coherence"}
else if (data$type=="conn_coh"){method = "Transferentropy"}
else if (data$type=="conn_freq"){method = "Frequency"}
else if (data$type=="conn_granger"){method = "Granger"}
if (data$type=="conn_coh"){method = "Coherence"
}else if (data$type=="conn_coh"){method = "Transferentropy"}
else if (data$type=="conn_freq"){method = "Frequency"}
#cat(file = stderr(), "entering perform_preprocessing with method = ")
#cat(file = stderr(), method)
#cat(file = stderr(), "\n")
#cat(file = stderr(), paste0("getwd()=",getwd(), "\n"))
data = NULL
if (is.null(data)){ data = fromJSON(file = "./prepro/CoherenceSt/export_conn_coh.json")}
if (data$type=="conn_coh"){method = "Coherence"
}else if (data$type=="conn_coh"){method = "Transferentropy"
}else if (data$type=="conn_freq"){method = "Frequency"
}else if (data$type=="conn_granger"){method = "Granger"
}else if (data$type=="conn_erp"){method = ""
}else if (data$type=="conn_rs"){method = "RS"
}else { stop(paste0("unknown datatype detected with type=",data$type,"\n")) }
#cat(file = stderr(), "entering perform_preprocessing with method = ")
#cat(file = stderr(), method)
#cat(file = stderr(), "\n")
#cat(file = stderr(), paste0("getwd()=",getwd(), "\n"))
df_BD=NULL
if (is.null(df_BD)){ df_BD = read.csv(file = "./prepro/CoherenceSt/bd.csv", header = TRUE, sep = ';', check.names = FALSE))}
if (is.null(df_BD)){ df_BD = read.csv(file = "./prepro/CoherenceSt/bd.csv", header = TRUE, sep = ';', check.names = FALSE)}
df_BD <- dfBD[df_BD$ID %in% data$subjects_id,]
df_BD2 <- df_BD[df_BD$ID %in% data$subjects_id,]
df_BD3 <- df_BD2[match(data$subjects_id, df_BD2$ID),]
id_list = df_BD3[['ID']]
View(data)
View(data)
length(data$subjects_id)
data$subjects[1]
data$subjects[1]$trials[1]
data$subjects[1]$trials[2]
x = data$subjects[1]
x
x$trials
x[1]$trials
x = data$subjects[[1]]
x
x = data$subjects[[1]]$trials
dat_subj = data$subjects[[1]]
dat_subj$trials[[1]]
dat_trial = dat_subj$trials[[1]]
dat_trial
dat_trial$trial_id
library(shiny)
runApp('app')
data = fromJSON(file = "../dataVisdata/prepro/MEG/export_conn_coh.json")
df_BD = read.csv(file = "../dataVisdata/prepro/MEG/bd.csv", header = TRUE, sep = ';', check.names = FALSE)
if (data$type=="conn_coh"){method = "Coherence"
}else if (data$type=="conn_coh"){method = "Transferentropy"
}else if (data$type=="conn_freq"){method = "Frequency"
}else if (data$type=="conn_granger"){method = "Granger"
}else if (data$type=="conn_erp"){method = ""
}else if (data$type=="conn_rs"){method = "RS"
}else { stop(paste0("unknown datatype detected with type=",data$type,"\n")) }
df_BD <- df_BD[df_BD$ID %in% data$subjects_id,]
df_BD <- df_BD[match(data$subjects_id, df_BD$ID),]
id_list = df_BD[['ID']]
uregion_list = data$channels
utrial_list = data$trials
ufreq_list = data$freq
subj_list <- seq(1,nrow(df_BD))
beh_list <- colnames(df_BD)
# reserviere den Speicher fuer das Datenarray
mdat <- array(data = NA,
dim = c(length(data$subjects_id),
length(uregion_list),
length(uregion_list),
length(utrial_list),
length(ufreq_list)
)
)
# fuellen des datenarrays mdat
for (num_subj in seq(1,length(data$subjects_id))){
cat(file= stderr(), paste0("subject number ", num_subj ,"/", length(data$subjects_id),"\n"))
dat_subj = data$subjects[[num_subj]]
if (dat_subj$subject_id != data$subjects_id[num_subj]) {stop("error in compare subject_id")}
for (n_trial in utrial_list){
num_freq = 0
num_trial = num_trial + 1
dat_trial = dat_subj$trials[[num_trial]]
if (dat_trial$trial_id != n_trial) {stop("error in compare trial_id")}
num_region1 = 0
for (n_region1 in uregion_list){
num_region2 = 0
num_region1 = num_region1 + 1
for (n_region2 in uregion_list){
num_trial = 0
num_region2 = num_region2 + 1
dat_reg = dat_trial$cohspctrm[[num_region1*(length(uregion_list)-1)]]
for (n_freq in ufreq_list){
num_freq = num_freq + 1
if (n_region1==n_region2){ tmp = 0
} else{
tmp = data$subjects[num_subj]$trials
region_name = paste0(n_region1,">",n_region2)
col_name <- paste(region_name,toString(n_trial),toString(n_freq),sep = "__")
tmp =  tbl_inp[[col_name]][num_subj]
if (is.null(tmp)){
region_name = paste0(n_region2,">",n_region1)
col_name <- paste(region_name,toString(n_trial),toString(n_freq),sep = "__")
tmp =  tbl_inp[[col_name]][num_subj]
}
if (is.null(tmp)){
tmp = NaN
}
}
mdat[num_subj, num_region1, num_region2, num_trial, num_freq] = tmp
}
}
}
}
}
View(data)
data$channelcmb$from[1]
data$channels[data$channelcmb$from[1]]
match(data$channelcmb$from[1],data$channels)
match(data$channelcmb$from[2],data$channels)
match(data$channelcmb$from[3],data$channels)
match(data$channelcmb$from, data$channels)
# create data$channelcmb$from_num und data$channelcmb$to_num
# die Datachannels sind als Strings abgelegt ... wir brauchen sie aber als Nummern
data$channelcmb$from_num = match(data$channelcmb$from, data$channels)
data$channelcmb$from_to = match(data$channelcmb$to, data$channels)
View(data)
data$channelcmb$to_num = match(data$channelcmb$to, data$channels)
View(data)
s = data$subjects[[1]]
s
s$trials[[1]]
t = s$trials[[1]]
dat = t$dat
dat
d = dat[[1]]
class(d)
length(d)
mdat <- array(data = NA,
dim = c(length(data$subjects_id),
length(uregion_list),
length(uregion_list),
length(utrial_list),
length(ufreq_list)
)
)
dim(mdat)
mdat[1,1,1,1,]=d
mdat[1,1,1:3,1,]=dat[[1:3]]
dat[[1:3]]
dat[1]
dat[2]
dat_subj = data$subjects[[1]]
dat_subj
length(dat_subj)
length(dat_subj$trials)
dim(mdat)
View(data)
d = data$subjects[[1]]
data$subjects[[1]]$trials[[1]]$dat[[1]][2]
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
M <- preprocessing2('./tmp')
M <- perform_preprocessing2('./tmpdat')
mdat[1,1,1,1,]=d
mdat[1,1,1,1,]
dim(mdat)
mdat <- array(data = NA,
dim = c(length(data$subjects_id),
length(uregion_list),
length(uregion_list),
length(utrial_list),
length(ufreq_list)
)
)
dim(mdat)
dim(d)
length(d)
d = data$subjects[[1]]$trials[[1]]$dat[[1]]
length(d)
mdat[1,1,1,1,]=d
mdat
dim(mdat)
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
M <- perform_preprocessing2('./tmpdat')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
M <- perform_preprocessing2('./tmpdat')
runTests("tests")
runTests("app/tests")
runTests("app")
runTests("app")
runTests("app")
runTests("app")
source('G:/Programming/dataVis/app/functions/preprocess_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
runTests("app")
runTests("app")
runTests("app")
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
runTests("app")
data2 = data
data2$subjects= data$subjects[1:3]
View(data2)
data = data2
data = fromJSON(file = "../dataVisdata/prepro/MEG/export_conn_coh.json")
View(data)
View(data)
d = data$subjects[[1]]$trials[[1]]$dat
class(d)
d[1]
d1 = data$subjects[[1]]$trials[[1]]$dat
d4 = data$subjects[[4]]$trials[[1]]$dat
d4
d4[1]
d4[[1]]
d1[[1]]
class(d1[[1]])
class(d4[[1]])
class(d1[[1]]=="numeric")
class(d1[[1]])=="numeric"
class(d1[[1]])=="numericd"
class(d1[[4]])=="numeric"
class(d4[[4]])=="numeric"
class(d4[[4]])=="list"
d4[[4]][[2]]
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
runTests("app")
M <- perform_preprocessing2('./tmpdat')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
M <- perform_preprocessing2('./tmpdat')
View(M)
View(M)
mdat[1,1,1,1,]
mdat[4,1,1,1,]
D <- perform_preprocessing2('./tmpdat')
View(D)
data = D
data <- fromJSON(file = coh_json_filename)
coh_json_filename = file.path(datapath, "export_conn_coh.json")
beh_csv_filename = file.path(datapath, "bd.csv")
df_BD <- fread(beh_csv_filename, header = TRUE, sep = ";", check.names = FALSE)
data <- fromJSON(file = coh_json_filename)
datapath = file.path(".","data","MEG")
resultspath = file.path(datapath,"test_results","Coherence")
cat(file = stderr(), paste0("dir = ", getwd(),"\n"))
coh_json_filename = file.path(datapath, "export_conn_coh.json")
beh_csv_filename = file.path(datapath, "bd.csv")
df_BD <- fread(beh_csv_filename, header = TRUE, sep = ";", check.names = FALSE)
data <- fromJSON(file = coh_json_filename)
data <- fromJSON(file = coh_json_filename)
coh_json_filename = file.path("./app/tests/testthat/data/MEG/" "export_conn_coh.json")
coh_json_filename = file.path("./app/tests/testthat/data/MEG" ,"export_conn_coh.json")
data <- fromJSON(file = coh_json_filename)
s1=0
for (i in 1:length(data$subjects)){
for (j in 1:length(data$subjects[[i]]$trials)){
for (k in 1:length(data$subjects[[i]]$trials[[j]]$dat)){
s1 = s1 + data$subjects[[i]]$trials[[j]]$dat[[k]][2]
}
}
}
s1=0
for (i in 1:length(data$subjects)){
cat(file = stderr(), "subject = ", i,"\n")
for (j in 1:length(data$subjects[[i]]$trials)){
for (k in 1:length(data$subjects[[i]]$trials[[j]]$dat)){
s1 = s1 + data$subjects[[i]]$trials[[j]]$dat[[k]][2]
}
}
}
s1=0
for (i in 1:length(data$subjects)){
cat(file = stderr(), "subject = ", i,"\n")
for (j in 1:length(data$subjects[[i]]$trials)){
for (k in 1:length(data$subjects[[i]]$trials[[j]]$dat)){
tmp = data$subjects[[i]]$trials[[j]]$dat[[k]][2]
if (is.na(tmp)){s1 = s1 + 0}
else {s1 = s1 + tmp}
}
}
}
s1=0
s1=0
for (i in 1:length(data$subjects)){
cat(file = stderr(), "subject = ", i,"\n")
for (j in 1:length(data$subjects[[i]]$trials)){
for (k in 1:length(data$subjects[[i]]$trials[[j]]$dat)){
tmp = data$subjects[[i]]$trials[[j]]$dat[[k]][2]
cat(file = stderr(), tmp)
if (is.na(tmp)){s1 = s1 + 0}
else {s1 = s1 + tmp}
}
}
}
s1=0
for (i in 1:length(data$subjects)){
cat(file = stderr(), "subject = ", i,"\n")
for (j in 1:length(data$subjects[[i]]$trials)){
for (k in 1:length(data$subjects[[i]]$trials[[j]]$dat)){
tmp = data$subjects[[i]]$trials[[j]]$dat[[k]][2]
cat(file = stderr(),paste0(tmp,"\n"))
if (is.na(tmp)){s1 = s1 + 0}
else {s1 = s1 + tmp}
}
}
}
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
D <- perform_preprocessing2('./tmpdat')
runTests('app')
runTests('app')
0 + NaN
runTests('app')
runTests('app')
runTests('app')
sum(M[,,,,2])
sum(M$mdat[,,,,2])
sum(M$mdat[,,,,2],na.rm=T)
s1=0
for (i in 1:length(data$subjects)){
cat(file = stderr(), "subject = ", i,"\n")
for (j in 1:length(data$subjects[[i]]$trials)){
for (k in 1:length(data$subjects[[i]]$trials[[j]]$dat)){
tmp = data$subjects[[i]]$trials[[j]]$dat[[k]][2]
cat(file = stderr(),paste0(tmp,"\n"))
cat(file = stderr(),paste0("class(tmp)=",tmp,"\n"))
if (class(tmp)=="list"){s1 = s1 + 0}
else{
cat(file = stderr(),paste0(tmp,"\n"))
if (is.nan(tmp)){ s1 = s1 + 0
} else if (is.na(tmp)){s1 = s1 + 0
} else if (is.double(tmp)){s1 = s1 + tmp
} else { cat(file = stderr(), paste0("unknown data type with class(tmp) = ", class(tmp), "   val = ", tmp, "\n"))
}
}
}
}
}
cat(file = stderr(),s1)
runTests('app')
runTests('app')
runTests('app')
runTests('app')
runTests('app')
runTests('app')
runTests('app')
runTests('app')
runTests('app')
runTests('app')
runTests('app')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
M <- perform_preprocessing2('./tmpdat')
View(M)
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
M <- perform_preprocessing2('./tmpdat')
View(M)
M$mdat["subj_l02_merged",1,1,2,1]
M$mdat["subj_l02_mergedx",1,1,2,1]
M$mdat["subj_l02_merged",1,1,1,2]
M$mdat["subj_l03_merged",1,1,1,2]
M$mdat
M$mdat["subj_l03_merged",1,2,1,2]
uregion_list
dimnames(M$mdat)
dimnames(M$mdat)[[3]]
dimnames(M$mdat)[[0]]
dimnames(M$mdat)[[0]]=c(1,2,3,4,5)
