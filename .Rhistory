type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
col <- colorRampPalette(c("#FFFFFF", "#FFFFFF", "#FFFFFF", "#EE9988", "#BB4444", "#EE9988", "#FFFFFF", "#FFFFFF", "#FFFFFF"))
#col <- colorRampPalette(c("#4477AA", "#77AADD", "#FFFFFF"))
p.mat = glob_mat_p
corrplot(M, method="color", col=col(200),
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
col <- colorRampPalette(c("#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#EE9988", "#BB4444", "#EE9988", "#FFFFFF","#FFFFFF", "#FFFFFF",  "#FFFFFF", "#FFFFFF"))
#col <- colorRampPalette(c("#4477AA", "#77AADD", "#FFFFFF"))
p.mat = glob_mat_p
corrplot(M, method="color", col=col(200),
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
col <- colorRampPalette(c("#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#EE9988", "#BB4444", "#EE9988", "#FFFFFF","#FFFFFF", "#FFFFFF",  "#FFFFFF", "#FFFFFF","#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF" ))
#col <- colorRampPalette(c("#4477AA", "#77AADD", "#FFFFFF"))
p.mat = glob_mat_p
corrplot(M, method="color", col=col(200),
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
corrplot(M, method="color", col=col(400),
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
corrplot(M, method="color", col=col(250),
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
corrplot(M, method="color", col=col(200),
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
col <- colorRampPalette(c("#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#EE9988", "#BB4444", "#EE9988", "#FFFFFF","#FFFFFF", "#FFFFFF",  "#FFFFFF", "#FFFFFF","#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF" ))
corrplot(M, method="color", col=col(200),
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
xcol = col(10)
xcol
xcol = col(1000)
xcol
col <- colorRampPalette(c("#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF","#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#EE9988", "#BB4444", "#EE9988", "#FFFFFF","#FFFFFF", "#FFFFFF",  "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF","#FFFFFF", "#FFFFFF","#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF" ))
#col <- colorRampPalette(c("#4477AA", "#77AADD", "#FFFFFF"))
p.mat = glob_mat_p
corrplot(M, method="color", col=col(500),
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
x1<-corrplot(M, method="color", col=col(500),
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
myplot_corr<-corrplot(M, method="color", col=col(500),
add = T,
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
x1<-corrplot(M, method="color", col=col(500),
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
myplot_corr<-corrplot(M, method="color", col=col(500),
add = T,
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
myplot_corr
corrplot(M, method="color", col=col(500),
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
corrplot(M, method="color", col=col(500),
add = T,
type="upper", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
corrplot(M, method="color", col=col(500),
add = T,
type="lower", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
runApp(appDir = 'app', launch.browser = T)
corrplot(M, method="color", col=col(500),
add = T,
type="lower", order="hclust",
is.corr = F,
addCoef.col = "black", # Add coefficient of correlation
tl.col="black", tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat, sig.level = 0.501, insig = "blank",
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
source('G:/Programming/dataVis/app/functions/plots.R')
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
source('G:/Programming/dataVis/app/functions/plots.R')
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
source('G:/Programming/dataVis/app/functions/plots.R')
library('shiny')
runApp(appDir = 'app', launch.browser = T)
library('shiny')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
source('G:/Programming/dataVis/app/functions/plots.R')
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/plots.R')
source('G:/Programming/dataVis/app/functions/plots.R')
runApp(appDir = 'app', launch.browser = T)
library(shiny)
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
df_BD = read.csv(file = "../dataVisdata/prepro/Stefan_Fernsehen2105/subjects_TV_young.csv", header = TRUE, sep = ';', check.names = FALSE)}
df_BD = read.csv(file = "../dataVisdata/prepro/Stefan_Fernsehen2105/subjects_TV_young.csv", header = TRUE, sep = ';', check.names = FALSE)
df_BD
View(df_BD)
filejson= "../dataVisdata/prepro/Stefan_Fernsehen2105/export_fmri_corr_rep_measures.json"
filecsv= "../dataVisdata/prepro/Stefan_Fernsehen2105/subjects_TV_young.csv"
data <- fromJSON(file = datafilename)
data <- fromJSON(file = filejson)
method <- get_methodname(data)
method
data<-check_data_structure(data, df_BD, method)
mdat <- extract_data_array(data, df_BD, method)
D <- create_new_data_structure(data, df_BD, mdat, method)
#ugroup_list = paste("Group",as.character(unique(df_BD$Gruppe)),sep="")
ugroup_list = as.character(unique(df_BD$Gruppe))
#cat(file = stderr(), paste0("ugroup_list = ",ugroup_list,"\n"))
uregion_list = data$channels
uregion_list_named = list()
uregion_list_named[uregion_list] = 1:length(uregion_list)
utrial_list = as.character(data$trials)
if (length(utrial_list)==0){ utrial_list = c("no_desc_given") }
utrial_list_named = list()
utrial_list_named[utrial_list] = 1:length(utrial_list)
ufreq_list = as.character(data$freq)
if (length(ufreq_list)==0){ ufreq_list = c("0") }
ufreq_list_named = list()
ufreq_list_named[ufreq_list] = 1:length(ufreq_list)
ufreq_list_num = data$freq
if (length(ufreq_list_num)==0){ ufreq_list_num = c(0) }
dimcontent = c("sub","reg","reg","tri","fre")
View(data)
View(data)
data$subjects_id
df_BD$ID
setdiff(data$subjects_id, df_BD$ID)
identical(id_list,data$subjects_id
)
identical(,data$subjects_id
)
id_list = df_BD$ID
identical(id_list,data$subjects_id)
length(id_list)
cat(file = stderr(), paste0(setdiff(data$subjects_id, df_BD$ID)," is not in both datasets"))
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
View(gd_get_long_data)
someData <- rep(0, 365*6*4);
ar <- array(someData, c(365, 6, 4))
ar
someData <- rep(0, 3*4*5);
ar <- array(someData, c(3, 4, 5))
ar
someData <- rep(runif(1, 1,10), 3*4*5);
ar <- array(someData, c(3, 4, 5))
ar
someData <- rep(sample(1:10,1), 3*4*5);
ar
ar <- array(someData, c(3, 4, 5))
ar
sample(1:10,5)
ar <- matrix(rnorm(60), c(3, 4, 5))
ar
ar <- array(rnorm(60), c(3, 4, 5))
ar
M <- matrix(ar)
M
ar
d1 <- ar[,2,3,drop=FALSE]
d1
ar
d1
ar2 <- ar-d1
ar2 <- ar[,:,:]-d1
ar2 <- ar[,1,2]-d1
ar2 <- ar[,4,5]-d1
ar2
for (i in 1:dim(ar)[2]){}
for (i in 1:dim(ar)[2]){ for (j in 1:dim(ar)[3]){ ar2 <- ar[,i,j]-d1}}
ar2 <- ar
for (i in 1:dim(ar)[2]){ for (j in 1:dim(ar)[3]){ ar2 <- ar[,i,j]-d1}}
ar2
ar2 <- ar
ar2
for (i in 1:dim(ar)[2]){ for (j in 1:dim(ar)[3]){ ar2[,i,j,drop=FALSE] <- ar[,i,j]-d1}}
for (i in 1:dim(ar)[2]){ for (j in 1:dim(ar)[3]){ ar2[,i,j] <- ar[,i,j]-d1}}
ar2
ar
ar2
ar
runApp(appDir = 'app', launch.browser = T)
subtract_subarray(A,b){
C <- A
for (i in 1:dim(A)[2]){
for (j in 1:dim(A)[3]){
C[,i,j] <- A[,i,j]-b
}
}
}
subtract_A1_from_A3(A,b){
# subtrahiert ein eindimensionales Array von einem 3 dimensionalem
# A 3dim Array
# b 1 dim Array
C <- A
for (i in 1:dim(A)[2]){
for (j in 1:dim(A)[3]){
C[,i,j] <- A[,i,j]-b
}
}
}
subtract_A1_from_A3<-function(A,b){
# subtrahiert ein eindimensionales Array von einem 3 dimensionalem
# A 3dim Array
# b 1 dim Array
C <- A
for (i in 1:dim(A)[2]){
for (j in 1:dim(A)[3]){
C[,i,j] <- A[,i,j]-b
}
}
}
d1 <- ar[,2,3,drop=FALSE]
subtract_A1_from_A3<-function(A,b){
# subtrahiert ein eindimensionales Array von einem 3 dimensionalem
# A 3dim Array
# b 1 dim Array
C <- A
for (i in 1:dim(A)[2]){
for (j in 1:dim(A)[3]){
C[,i,j] <- A[,i,j]-b
}
}
}
for (i in 1:dim(ar)[2]){ for (j in 1:dim(ar)[3]){ ar2[,i,j] <- ar[,i,j]-d1}}
ar2
A<-ar
b<-d1
C<-subtract_A1_from_A3(A,b)
C
subtract_A1_from_A3<-function(A,b){
# subtrahiert ein eindimensionales Array von einem 3 dimensionalem
# A 3dim Array
# b 1 dim Array
C <- A
for (i in 1:dim(A)[2]){
for (j in 1:dim(A)[3]){
C[,i,j] <- A[,i,j]-b
}
}
return(C)
}
C<-subtract_A1_from_A3(A,b)
C
identical(C,ar)
identical(C,ar2)
l1 <- c("A","B","C")
l2 <- l1
l2
l2[2]
l2[2]<-"D"
l2
l1
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
library(shiny)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
library(shiny)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/modules/regression_long_stats.R', echo=TRUE)
source('G:/Programming/dataVis/app/modules/regression_long_stats.R', echo=TRUE)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)\
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
View(g_is_longitudinal_info_in_data)
View(gcorplot_matp)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
View(gDS0)
View(gD1)
library(shiny)
runApp(appDir = 'app', launch.browser = TRUE)
gdx4$df_data1$ID
gdx4$df_data2$ID
runApp(appDir = 'app', launch.browser = TRUE)
gdx4$df_data1$ID
gdx4$df_data2$ID
View(gdx4)
View(gdx4)
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
library('shiny')
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
library('shiny')
runApp(appDir = 'app', launch.browser = TRUE)
runApp(appDir = 'app', launch.browser = TRUE)
library('shiny')
runApp(appDir = 'app', launch.browser = TRUE)
library('shiny')
runApp(appDir = 'app', launch.browser = TRUE)
View(gM)
View(gDS1)
View(gDS0)
View(gdx4)
View(gdx4)
View(gdx4)
View(gdx3)
setwd("G:/OneDrive/paper/01_Franzi_Jenny/data")
setwd("G:/OneDrive/paper/01_Franzi_Jenny/data")
R.version
install.packages("installr")
library(installr)
updateR()
library(installr)
updateR()
setwd("G:/OneDrive/paper/01_Franzi_Jenny/data")
