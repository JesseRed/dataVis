m_new <- create_empty_array(D, num_regions_new, n_new_adapt)
regions_to_mean = get_regions_to_mean(num_regions_new, D$uregion_list_named, new_uregion_list_named)
for (s in 1:dim(D$mdat)[1]){
for (t in 1:dim(D$mdat)[4]){
for (f in 1:dim(D$mdat)[5]){
# nun uber die Regionen als 2 schleifen
m_new <- get_myareamean(D$mdat, m_new, s,t,f,num_regions_new, regions_to_mean)
}
}
}
m_new[1,,,1,1]
m_new[1,,,1,2]
m_new[2,,,1,2]
Dnew <- change_network_in_data_struct(D = D, new_uregion_list_named = new_uregion_list_named)
Dnew$mdat
Dnew$mdat[1,,,1,1]
D$mdat[1,,,1,1]
mdatn <- reestimate_mdat(D,new_uregion_list_named)
mdatn[1,,,1,1]
# veraendert werden muessen...
# 1. uregion_list
# 2. uregion_list_named
# 3. mdat
mdat_org = D$mdat
uregion_list_org = D$uregion_list
uregion_list_named_org = D$uregion_list_named
# entferne ausgelassene Columns
new_uregion_list_named <- remove_empty_cols(new_network)
D$mdat_org = D$mdat
View(D)
D$mdatx <- reestimate_mdat(D, new_uregion_list_named)
View(D)
D$mdat[1,,,1,1]
D$mdat_org[1,,,1,1]
D$mdatx[1,,,1,1]
new_uregion_list_named
new_uregion_list_named = D$uregion_list_named
new_uregion_list_named$Areal1 <- 2
new_uregion_list_named$Areal2 <- 5
new_uregion_list_named$Areal3 <- 3
new_uregion_list_named$Areal4 <- 5
new_uregion_list_named$Areal5 <- 3
new_uregion_list_named
Dnew <- change_network_in_data_struct(D = D, new_uregion_list_named = new_uregion_list_named)
Dnew$mdat[1,,,1,1]
new_uregion_list_named
source('G:/Programming/dataVis/app/functions/network_functions.R')
Dnew <- change_network_in_data_struct(D = D, new_uregion_list_named = new_uregion_list_named)
Dnew$mdat[1,,,1,1]
Dnew$mdatx[1,,,1,1]
Dnew$uregion_list
Dnew$uregion_list_named
m = matrix(c(1,9,7,6,1,10,5,11,1), nrow = 3, ncol = 3)
m
m = matrix(c(1,9,7,6,1,10,5,11,1), ncol = 3, nrow = 3)
m
m = matrix(c(1,6,5,9,1,11,7,10, 1), ncol = 3, nrow = 3)
m
runTests(appDir = 'app', filter = 'testlong')
source('G:/Programming/dataVis/app/functions/network_functions.R')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
handmat = matrix(c(1,6,5,9,1,11,7,10, 1), ncol = 3, nrow = 3)
Dnew[1,,,1,1]
Dnew[1,,,1,1]
Dnew <- change_network_in_data_struct(D = D, new_uregion_list_named = new_uregion_list_named)
Dnew[1,,,1,1]
Dnew$mdat[1,,,1,1]
m2 = Dnew$mdat[1,,,1,1]
m2
handmat
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
source('G:/Programming/dataVis/app/functions/get_data2.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/get_data2.R')
source('G:/Programming/dataVis/app/functions/get_data2.R')
source('G:/Programming/dataVis/app/functions/get_data2.R')
source('G:/Programming/dataVis/app/functions/network_functions.R')
runTests(appDir = 'app', filter = 'testlong')
source('G:/Programming/dataVis/app/functions/network_functions.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/functions/get_data2.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/functions/network_functions.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp(appDir = 'app', launch.browser = T)
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
source('G:/Programming/dataVis/app/functions/network_functions.R')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
source('G:/Programming/dataVis/app/functions/network_functions.R')
runTests(appDir = 'app', filter = 'testlong')
DX <- readRDS("./app/tests/testlong/data/fMRI2/Dorg.Rda")
View(DX)
Dnew <- change_network_in_data_struct(D = D, new_uregion_list_named = new_uregion_list_named, is_use_fast_algorithm = TRUE)
new_uregion_list_named
D$uregion_list_named
DX$uregion_list_named
new_uregion_list_named<- DX$uregion_list_named
new_uregion_list_named[1]
new_uregion_list_named[3]
new_uregion_list_named[3]<- 4
new_uregion_list_named[3]
new_uregion_list_named[2]<- 4
new_uregion_list_named[8]<- 9
new_uregion_list_named[18]<- 29
# teste die GEschwindigkeit der schnellen Variante
DX <- readRDS("./app/tests/testlong/data/fMRI2/Dorg.Rda")
new_uregion_list_namedX<- DX$uregion_list_named
new_uregion_list_namedX[3]<-4
new_uregion_list_namedX[6]<-7
new_uregion_list_namedX[29]<-35
new_uregion_list_namedX[2]<-14
start_time <- Sys.time()
DXnew <- change_network_in_data_struct(D = DX, new_uregion_list_named = new_uregion_list_namedX)
DX$mdat <- DX$mdat[1:20,,,,]
start_time <- Sys.time()
DX$mdat <- DX$mdat[1:20,,,,]
# teste die GEschwindigkeit der schnellen Variante
DX <- readRDS("./app/tests/testlong/data/fMRI2/Dorg.Rda")
new_uregion_list_namedX<- DX$uregion_list_named
new_uregion_list_namedX[3]<-4
new_uregion_list_namedX[6]<-7
new_uregion_list_namedX[29]<-35
new_uregion_list_namedX[2]<-14
start_time <- Sys.time()
DX$mdat <- DX$mdat[1:20,,,,]
DXnew <- change_network_in_data_struct(D = DX, new_uregion_list_named = new_uregion_list_namedX)
cat(file = stderr(), "without fast ... ", Sys.time()-start_time, "\n")
# teste die GEschwindigkeit der schnellen Variante
DX <- readRDS("./app/tests/testlong/data/fMRI2/Dorg.Rda")
DX$mdat <- DX$mdat[1:20,,,,]
View(DX)
DXnew <- change_network_in_data_struct(D = DX, new_uregion_list_named = new_uregion_list_namedX)
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
source('G:/Programming/dataVis/app/functions/network_functions.R')
runTests(appDir = 'app', filter = 'testlong')
source('G:/Programming/dataVis/app/functions/network_functions.R')
runTests(appDir = 'app', filter = 'testlong')
source('G:/Programming/dataVis/app/functions/network_functions.R')
runTests(appDir = 'app', filter = 'testlong')
source('G:/Programming/dataVis/app/functions/network_functions.R')
runTests(appDir = 'app', filter = 'testlong')
source('G:/Programming/dataVis/app/functions/network_functions.R')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
D$id_list[1:20]
source('G:/Programming/dataVis/app/functions/network_functions.R')
runTests(appDir = 'app', filter = 'testlong')
source('G:/Programming/dataVis/app/functions/network_functions.R')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
start_time <- Sys.time()
proc_time1 = Sys.time()-start_time
start_time <- Sys.time()
proc_time2 = Sys.time()-start_time
faster_time = (proc_time2/proc_time1)/100
proc_time2
class(proc_time1)
as.double(proc_time1)
runTests(appDir = 'app', filter = 'testlong')
cat(file = stderr(), paste0("fast algorithm was faster by ", round((as.double(proc_time2)/as.double(proc_time1))/100,2) ,"% \n"))
mdat_new <- ones(num_regions_new, num_regions_new)
class(mdat_new)
class(mdat)
class(D$mdat)
source('G:/Programming/dataVis/app/functions/network_functions.R')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
View(gtmp2)
gtmp1
gtmp1[1,,,1,1]
tmp1[,]
gtmp1[,]
gtmp2[,]
runApp('app')
gtmp1
gtmp1x <- gtmp1[1,,,1,1]
dimnames(gtmp1x)
dimnames(gtimp1x)<-NULL
dimnames(gtmp1x)<-NULL
dimnames(gtmp2)<-NULL
identical(gtmp1x, gtmp2)
runTests(appDir = 'app', filter = 'testlong')
runTests(appDir = 'app', filter = 'testlong')
library(shiny)
runApp(appDir= 'app', launch.browser = T)
D <- readRDS("../dataVisdata/data/Coherence_1238/D.Rda")
names(D$df_BD)
colnames(D$df_BD)
x = colnames(D$df_BD)
x
"V163" %in% colnames(D$df_BD)
"V163s" %in% colnames(D$df_BD)
source('G:/Programming/dataVis/app/functions/get_data2.R')
runApp(appDir= 'app', launch.browser = T)
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp(appDir= 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp(appDir= 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp(appDir= 'app', launch.browser = T)
gffreq
gfdata
dim(gfdata)
?asub
list(gffreq)
length(dim(data))
length(dim(gfdata))
runApp(appDir= 'app', launch.browser = T)
get_selected_freq_list(D$ufreq_list, c(0,5))
runApp(appDir= 'app', launch.browser = T)
get_selected_freq_list(D$ufreq_list, c(0,5))
runApp(appDir= 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp(appDir= 'app', launch.browser = T)
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp(appDir= 'app', launch.browser = T)
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp(appDir= 'app', launch.browser = T)
source('G:/Programming/dataVis/app/modules/compare_group_stats.R')
runApp(appDir= 'app', launch.browser = T)
runApp(appDir= 'app', launch.browser = T)
runApp(appDir= 'app', launch.browser = T)
source('G:/Programming/dataVis/app/modules/compare_group_stats.R')
runApp(appDir= 'app', launch.browser = T)
library(shiny)
runApp(appDir= 'app', launch.browser =  TRUE)
runApp(appDir= 'app', launch.browser =  TRUE)
D <- readRDS("G:/Programming/dataVisdata/data/Conn_RS_01/D.Rda")
View(D)
View(D)
D$df_BD
D$mdat[1,,,1,1]
runApp(appDir= 'app', launch.browser =  TRUE)
runApp(appDir= 'app', launch.browser =  TRUE)
runApp(appDir= 'app', launch.browser =  TRUE)
View(gcorplot_matp)
View(gcorplot_matt)
View(gM)
gM$data1
View(gDnew)
View(D)
View(D)
D$id_list
D$id_list[1]
runApp(appDir= 'app', launch.browser =  TRUE)
runApp(appDir= 'app', launch.browser =  TRUE)
D$id_list
D$df_BD
D$mdat[1,1:5,1:5,1,1]
D$mdat[1,1:5,1:5,2,1]
D$mdat[2,1:5,1:5,2,1]
D$mdat[3,1:5,1:5,2,1]
D$mdat[4,1:5,1:5,2,1]
D$mdat[14,1:5,1:5,2,1]
runApp(appDir= 'app', launch.browser =  TRUE)
D$df_BD[D$df_BD$Gruppe ==2]
j <- fromJSON("G:/Programming/dataVisdata/prepro/Wagner/export_fmri_trials_corr.json")
j <- fromJSON(file = "G:/Programming/dataVisdata/prepro/Wagner/export_fmri_trials_corr.json")
j
View(j)
runApp(appDir= 'app', launch.browser =  TRUE)
runApp(appDir= 'app', launch.browser =  TRUE)
gcorplot_matp
min(gcorplot_matp)
runApp(appDir= 'app', launch.browser =  TRUE)
runApp(appDir= 'app', launch.browser =  TRUE)
runApp(appDir= 'app', launch.browser =  TRUE)
runApp(appDir= 'app', launch.browser =  TRUE)
runApp(appDir= 'app', launch.browser =  TRUE)
runApp(appDir= 'app', launch.browser =  TRUE)
min(gcorplot_matp)
gcorplot_matp
gcorplot_matp[1,2] = NA
min(gcorplot_matp)
min(gcorplot_matp, rm.na = TRUE)
min(gcorplot_matp, rm.na = F)
min(gcorplot_matp, na.rm = T)
runApp(appDir= 'app', launch.browser =  TRUE)
glob_mat_p
runApp(appDir= 'app', launch.browser =  TRUE)
source('G:/Programming/dataVis/app/functions/get_data2.R')
source('G:/Programming/dataVis/app/functions/get_data2.R')
source('G:/Programming/dataVis/app/functions/get_data2.R')
source('G:/Programming/dataVis/app/functions/get_data2.R')
source('G:/Programming/dataVis/app/functions/get_data2.R')
library('shiny')
runApp(appDir =  'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/get_data2.R')
runTests(appDir = 'app', filter = "testlong")
runTests(appDir = 'app', filter = "testlong")
runTests(appDir = 'app', filter = "testlong")
runTests(appDir = 'app', filter = "testlong")
runTests(appDir = 'app', filter = "testlong")
runTests(appDir = 'app', filter = "testlong")
View(gdx)
View(gdx)
d$explanation = paste0("Compare the in group diff of ", t1," vs ", t2, "between group ", g1, " and ", g2, "\n",
"unpaired t-test\n")
g1 = 1
g2 = 1
t1 = 1
t2 = 2
d$explanation = paste0("Compare the in group diff of ", t1," vs ", t2, "between group ", g1, " and ", g2, "\n",
"unpaired t-test\n")
explanation = paste0("Compare the in group diff of ", t1," vs ", t2, "between group ", g1, " and ", g2, "\n",
"unpaired t-test\n")
explanation
d$explanation = paste0("same group different trial not longitudinal... Compare the same group between 2 trials ", t1," vs ", t2, " in group ", g1, "\n",
"paired t-testindependent t-test\n")
explanation = paste0("same group different trial not longitudinal... Compare the same group between 2 trials ", t1," vs ", t2, " in group ", g1, "\n",
"paired t-testindependent t-test\n")
explanation
runTests(appDir = 'app', filter = "testlong")
runTests(appDir = 'app', filter = "testlong")
runTests(appDir = 'app', filter = "testlong")
srcfile <- attr(attr(get_selected_data_considering_group_trial(),"srcref"),"srcfile")
srcfile <- attr(attr(get_selected_data_considering_group_trial,"srcref"),"srcfile")
srcfile
source('G:/Programming/dataVis/app/functions/get_data.R')
runTests(appDir = 'app', filter = "testlong")
source('G:/Programming/dataVis/app/functions/get_data.R')
runTests(appDir = 'app', filter = "testlong")
View(glob_mat_t)
View(gdx)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/functions/get_data2.R')
library('shiny')
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/get_data2.R')
source('G:/Programming/dataVis/app/functions/get_data2.R')
library('shiny')
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
View(g_myModel)
adjustedMeans<-effect("Gruppe",g_myModel, se=TRUE)
runApp(appDir = 'app', launch.browser = T)
library('shiny')
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
2**3
1-(0.95**5)
source('G:/Programming/dataVis/app/functions/get_data.R')
library('shiny')
runApp(appDir = 'app', launch.browser = T)
runApp(appDir = 'app', launch.browser = T)
s <- matrix(rep(T,25),ncol=5)
s
t = ones(5,6)
t
dim(t)
dim(t)[1]
libido<-c(3,2,1,1,4,5,2,4,2,3,7,4,5,3,6)
dose<-gl(3,5, labels = c("Placebo","Low Dose", "High Dose"))
viagraData<-data.frame(dose, libido)
line <- ggplot(viagraData, aes(dose, libido))
line
line + stat_summary(fun.y = mean, geom = "point")
line + stat_summary(fun.y = mean, geom = "line", aes(group=1))
line + stat_summary(fun.y = mean, geom = "line", aes(group=1), colour ="Blue", linetype = "dashed")
line + stat_summary(fun = mean, geom = "line", aes(group=1), colour ="Blue", linetype = "dashed")
line + stat_summary(fun.data = mean_cl_boot, geom = "errorbar"
)
line + stat_summary(fun.data = mean_cl_boot, geom = "errorbar")
install.packages(Hmisc)
install.packages('Hmisc')
library('Hmisc')
line + stat_summary(fun.data = mean_cl_boot, geom = "errorbar")
line + stat_summary(fun = mean, geom = "point")
+ stat_summary(fun = mean, geom = "line", aes(group=1), colour ="Blue", linetype = "dashed")
line<- line + stat_summary(fun = mean, geom = "line", aes(group=1), colour ="Blue", linetype = "dashed")
line
line <- line + stat_summary(fun = mean, geom = "point")
line
line <- line + stat_summary(fun.data = mean_cl_boot, geom = "errorbar")
line
pairwise.t.test(viagraData$libido, viagraData$dose, p.adjust.method = "bonferoni")
pairwise.t.test(viagraData$libido, viagraData$dose, p.adjust.method = "bonferroni")
tt = pairwise.t.test(viagraData$libido, viagraData$dose, p.adjust.method = "bonferroni")
tt
View(tt)
View(P)
View(t)
View(tt)
View(viagraData)
View(tt)
View(viagraData)
View(viagraData)
View(gDS2)
data1 <- gDS2$mdat[,,,1,1]
dim(data1)
data1 <- gDS2$mdat[,,,2,1]
data2 <- gDS2$mdat[,,,2,1]
data1 <- gDS2$mdat[,,,1,1]
?pairwise.t.test
df1 = as.data.frame(data1)
df1
View(df1)
pairwise.t.test(df1$data,
df1$key,
pool.sd=FALSE)
pairwise.t.test(df1$data, df1$key, pool.sd=FALSE)
df1
names(ddata())
names(data1)
colnames(data1)
View(viagraData)
?p.adjust
x <- p.adjust(mat_p, method = "none")
x
mdat_p
mat_p
x <- p.adjust(mat_p, method = "fdr")
x
x <- p.adjust(mat_p, method = "bonferroni")
x
x <- p.adjust(mat_p, method = "bonferroni", n = 10)
x <- p.adjust(mat_p, method = "bonferroni", n = 80)
x <- p.adjust(mat_p, method = "bonferroni", n = 90)
x
mat_p[2,1] = NA
mat_p[3,1] = NA
mat_p[4,1] = NA
x <- p.adjust(mat_p, method = "bonferroni")
x
mat_p[5,1] = NA
mat_p[6,1] = NA
x <- p.adjust(mat_p, method = "bonferroni")
x
source('G:/Programming/dataVis/app/functions/get_data2.R')
source('G:/Programming/dataVis/app/functions/get_data2.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data2.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data2.R')
x <- as.matrix(p.adjust(mat_p, method = "holm", nrow=dim(data1)[2])
)
x <- as.matrix(p.adjust(mat_p, method = "holm"), nrow=dim(data1)[2])
x
x <- p.adjust(mat_p, method = "holm")
x
y <- as.matrix(x,nrow = 10)
y
y <- as.matrix(x,nrow = 14)
y
y <- as.matrix(x,nrow = 14)
v1 = 1:196
m1 <- as.matrix(v1,nrow=14)
m1
v1 = 1:9
m1 <- as.matrix(v1,nrow=3)
m1
m1 <- matrix(v1,nrow=3)
m1
source('G:/Programming/dataVis/app/functions/get_data2.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/get_data2.R')
runApp(appDir = 'app', launch.browser = T)
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp(appDir = 'app', launch.browser = T)
