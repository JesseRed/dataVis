source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
M <- perform_preprocessing2('./tmpdat')
View(M)
M$mdat["subj_l02_merged",1,1,2,1]
M$mdat["subj_l02_mergedx",1,1,2,1]
M$mdat["subj_l02_merged",1,1,1,2]
M$mdat["subj_l03_merged",1,1,1,2]
M$mdat
M$mdat["subj_l03_merged",1,2,1,2]
uregion_list
dimnames(M$mdat)
dimnames(M$mdat)[[3]]
dimnames(M$mdat)[[0]]
dimnames(M$mdat)[[0]]=c(1,2,3,4,5)
runApp('app')
library(shiny)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
filename <- file.path("G:/Programming/dataVisdata/data/RS_1327/D.Rda")
filename
D <- readRDS(filename)
View(D)
M = D$mdat
M[1,1,2]
M[1,1,2,0,0]
M
t = data$trials
filenamejson <- file.path("G:/Programming/dataVisdata/prepro/fMRI/export_fmri.json")
library(rjson)
data = fromJSON(filenamejson)
data = fromJSON(jile = filenamejson)
data = fromJSON(file = filenamejson)
t = data$trials
t
length(t)
library(shiny)
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
runApp('app')
D1 <- readRDS("G:\Programming/dataVisdata/data/RS_00/D.Rda")
D1 <- readRDS("G:/Programming/dataVisdata/data/RS_00/D.Rda")
D2 <- readRDS("G:/Programming/dataVisdata/data/RS_01/D.Rda")
View(D1)
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
identical(D1$method, D2$method)
identical(D1$ugroup_list, D2$ugroup_list)
identical(D1$id_list, D2$id_list)
identical(D1$uregion_list, D2$uregion_list)
identical(D1$ufreq_list, D2$ufreq_list)
identical(D1$dimcontent, D2$dimcontent)
A = D1$id_list
B = D2$id_list
X = A %in% B
X
intersect(A,B)
?intersect()
A
intersect(D1$id_list,D2$id_list)
x = y = intersect(D1$id_list,D2$id_list)
x
y
D1$df_BD$ID == x
x %in% D1$df_BD$ID
D1$df_BD$ID %in% x
df_BD = D1$df_BD[D1$df_BD$ID %in% x]
View(df_BD)
View(df_BD)
View(df_BD)
View(D1)
M3 = D1$mdat[D1$df_BD$ID %in% x,,,,]
dim(M3)
M3 = D1$mdat[D1$df_BD$ID %in% x,,,,,drop = FALSE]
dim(M3)
View(D1)
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
x = get_currently_selected_data_long(D1, 0, 1, 1, 1, )
runApp('app')
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp('app')
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp('app')
source('G:/Programming/dataVis/app/functions/get_data.R')
x = get_currently_selected_data_long(D1, 0, 1, 1, 1, c(TRUE),D1$utrial_list,D1$uregion_list, method = "RS")
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp('app')
homogen_group_data = exclude_data_from_not_reoccuring_subjects(D1,D2)
View(homogen_group_data)
View(homogen_group_data)
HD1t <- homogen_group_data$HD1
View(homogen_group_data)
View(homogen_group_data)
source('G:/Programming/dataVis/app/functions/get_data.R')
homogen_group_data = exclude_data_from_not_reoccuring_subjects(D1,D2)
HD1t <- homogen_group_data$HD1
View(HD1t)
View(HD1t)
runApp('app')
View(HD1)
View(HD2)
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
D3= duplicate(D1,shallow = FALSE)
library(rlang)
D3= duplicate(D1,shallow = FALSE)
D3= copy(D1)
D3
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp('app')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp('app')
View(HD1)
View(HD1)
View(HD1)
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp('app')
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
View(M)
View(D1)
DT1 = D1
DT1$uregion_list = c('R1', 'R2', 'R3')
DT1$uregion_list_named = c(R1=1, R2=2, R3=3)
DT1$id_list = c('S1', 'S2', 'S3','S4')
DT1$df_BD = data.frame('ID'= c('S1', 'S2', 'S3','S4','S5'),'Gruppe'=c(0,0,1,1,1)
)
DT1$mdat = D1$mdat[1:5,1:3,1:3,,,drop=FALSE]
View(DT1)
View(DT1)
DT1$id_list = c('S1', 'S2', 'S3','S4','S5')
DT1$mdat
DT2 = D1
DT1$uregion_list = c('R1', 'R2', 'R3')
DT2$uregion_list = c('R1', 'R2', 'R3')
DT2$id_list = c('S2', 'S3','S4','S5','S6')
DT2$df_BD = data.frame('ID'= c('S2', 'S3','S4','S5','S6'),'Gruppe'=c(0,0,1,1,1)
)
DT1$df_BD = data.frame('ID'= c('S1', 'S2', 'S3','S4','S5'),'Gruppe'=c(0,0,0,1,1))
DT2$mdat = D2$mdat[1:5,1:3,1:3,,,drop=FALSE]
homogen_group_dataT = exclude_data_from_not_reoccuring_subjects(DT1,DT2)
HD1 = DT1
HD2 = DT2
HD1$id_list = HD2$id_list = intersect(DT1$id_list, DT2$id_list)
HD1$df_BD = DT1$df_BD[DT1$df_BD$ID %in% HD1$id_list]
HD2$df_BD = DT2$df_BD[DT2$df_BD$ID %in% HD2$id_list]
HD1$mdat = DT1$mdat[DT1$df_BD$ID %in% HD1$id_list,,,,,drop = FALSE]
HD2$mdat = DT2$mdat[DT2$df_BD$ID %in% HD2$id_list,,,,,drop = FALSE]
DT2$df_BD[DT2$df_BD$ID %in% HD2$id_list]
HD2$id_list
DT2$df_BD
DT2$df_BD$ID %in% HD2$id_list
DT2$df_BD[DT2$df_BD$ID %in% HD2$id_list,]
source('G:/Programming/dataVis/app/functions/get_data.R')
HD1 = DT1
HD2 = DT2
HD1$id_list = HD2$id_list = intersect(DT1$id_list, DT2$id_list)
HD1$df_BD = DT1$df_BD[DT1$df_BD$ID %in% HD1$id_list]
HD2$df_BD = DT2$df_BD[DT2$df_BD$ID %in% HD2$id_list]
HD1$mdat = DT1$mdat[DT1$df_BD$ID %in% HD1$id_list,,,,,drop = FALSE]
HD2$mdat = DT2$mdat[DT2$df_BD$ID %in% HD2$id_list,,,,,drop = FALSE]
homogen_group_dataT = exclude_data_from_not_reoccuring_subjects(DT1,DT2)
homogen_group_dataT
runApp('app')
View(M)
View(M)
View(D1)
View(D1)
HD1
View(HD1)
HD1$df_BD
HD1$mdat
runTests('testthat')
runTests('app')
runTests('app')
runTests('app')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
runTests('app')
runTests('app')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
runTests('app')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
runTests('app')
runTests('app')
runTests('app')
runTests('app')
source('G:/Programming/dataVis/app/functions/preprocess_data2.R')
runTests('app')
runTests('app')
M
sum(M[,,,,2],na.rm=T
)
runTests('app')
runTests('app')
View(Dsave)
View(Dsave)
data <- fromJSON(file = "G:/Programming/dataVis/app/tests/testthat/data/MEG/export_conn_coh.json)
)
""
""
data <- fromJSON(file = "G:/Programming/dataVis/app/tests/testthat/data/MEG/export_conn_coh.json")
View(data)
View(data)
View(data)
View(data)
data
View(data)
View(data)
View(data)
View(data)
View(data)
data$subjects_id
get_sum_freq(data, 2)
source(test-preprocessing2.R)
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/tests/testthat/test-preprocessing2.R')
get_sum_freq(data, 2)
View(data$subjects)
tmp = data$subjects[[i]]$trials[[j]]$dat[[k]][target]
i = 1; j = 2; k=3
tmp = data$subjects[[i]]$trials[[j]]$dat[[k]][target]
target = 2
tmp = data$subjects[[i]]$trials[[j]]$dat[[k]][target]
data$subjects[[i]]$trials[[j]]$dat[[k]][target]
M[1,1,3,2,3]
XD <- fromJSON(file = "G:/Programming/dataVis/app/tests/testthat/data/MEG/export_conn_coh.json")
View(XD)
M[1,1,4,2,3]
data$subjects[[1]]$trials[[1]]$dat[[2]][3]
M[1,1,3,1,3]
runTests('app')
runTests('app')
D<-DT1; saveRDS(D, file = file.path("G:\Programming/dataVis/app/tests/testthat/data/fMRI/", "D.Rda"))
D<-DT1; saveRDS(D, file = file.path("G:/Programming/dataVis/app/tests/testthat/data/fMRI/", "D.Rda"))
D<-DT2; saveRDS(D, file = file.path("G:/Programming/dataVis/app/tests/testthat/data/fMRI/", "D2.Rda"))
D<-DT1; saveRDS(D, file = file.path("G:/Programming/dataVis/app/tests/testthat/data/fMRI/", "D1.Rda"))
runTests('app')
runTests('app')
View(HD1)
View(D1)
length(D1$id_list)
View(HD1)
dim(HD1$mdat)[1]
runTests('app')
runTests('app')
runTests('app')
runTests('app')
source('G:/Programming/dataVis/app/functions/get_data.R')
runTests('app')
runTests('app')
runTests('app')
runTests('app')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
runTests('app')
runTests('app')
dim(d1)
View(d1)
dim(d1$data1)
HD1$id_list
HD2$id_list
DL2 <- readRDS(file = file.path("G:/Programming/dataVis/app/tests/testthat/data/fMRI/", "D2.Rda"))
DL1 <- readRDS(file = file.path("G:/Programming/dataVis/app/tests/testthat/data/fMRI/", "D1.Rda"))
DL1$id_list
DL2$id_list
View(DL1)
homogen_group_data = exclude_data_from_not_reoccuring_subjects(D1,D2)
HD1 <- homogen_group_data$HD1
HD2 <- homogen_group_data$HD2
View(HD1)
homogen_group_data = exclude_data_from_not_reoccuring_subjects(DL1,DL2)
HD1 <- homogen_group_data$HD1
HD2 <- homogen_group_data$HD2
View(HD1)
View(HD2)
d1 <- get_selected_data_considering_group_trial(HD1$mdat, g1, g2 ,t1,t2, freq,  trials = HD1$utrial_list, tbl_beh = HD1$df_BD, method = HD1$method)
g1 = 0; g2 = 1; t1 = 1; t2 = 1
d1 <- get_selected_data_considering_group_trial(HD1$mdat, g1, g2 ,t1,t2, freq,  trials = HD1$utrial_list, tbl_beh = HD1$df_BD, method = HD1$method)
g1 = 0; g2 = 1; t1 = 1; t2 = 1; freq = c(TRUE)
d1 <- get_selected_data_considering_group_trial(HD1$mdat, g1, g2 ,t1,t2, freq,  trials = HD1$utrial_list, tbl_beh = HD1$df_BD, method = HD1$method)
View(d1)
d1$data1
d1$data1[1,,]
d1$data1[2,,]
d1$data2[1,,]
d1$data2[2,,]
d <- d1
d$data1 <- d2$data1-d1$data1
d$data2 <- d2$data2-d1$data2
View(d)
d$data1[1,,]
d$data1[2,,]
d$mat_p = ones(dim(d$data1)[2], dim(d$data1)[3])
d$mat_t = zeros(dim(d$data1)[2], dim(d$data1)[3])
#cat(file = stderr(), "entering for loop ... now \n")
for (i in 1:(dim(d$data1)[2])-1){
start_idx = i+1
if (method =="Granger"){
start_idx = 1
}
for (j in start_idx:(dim(d$data1)[3])){
if (!(i==j)){
x <- na.omit(d$data1[,i,j])
y <- na.omit(d$data2[,i,j])
out<- tryCatch(
{
z = t.test(x,y, paired = d$my_paired)
d$mat_p[i,j] = z$p.value
d$mat_t[i,j] = z$statistic
},
error = function(cond){
#cat(file = stderr(), paste0("error ttest estimation of in i=",i," j=",j,"\n"))
#cat(file = stderr(), paste0("error message =",cond,"\n"))
d$mat_p[i,j] = 1
d$mat_t[i,j] = 0
},
warning= function(cond){
#cat(file = stderr(), paste0("warning ttest estimation of in i=",i," j=",j,"\n"))
#cat(file = stderr(), paste0("warning message =",cond,"\n"))
d$mat_p[i,j] = 1
d$mat_t[i,j] = 0
})
}
}
}
method = "RS"
#cat(file = stderr(), "entering for loop ... now \n")
for (i in 1:(dim(d$data1)[2])-1){
start_idx = i+1
if (method =="Granger"){
start_idx = 1
}
for (j in start_idx:(dim(d$data1)[3])){
if (!(i==j)){
x <- na.omit(d$data1[,i,j])
y <- na.omit(d$data2[,i,j])
out<- tryCatch(
{
z = t.test(x,y, paired = d$my_paired)
d$mat_p[i,j] = z$p.value
d$mat_t[i,j] = z$statistic
},
error = function(cond){
#cat(file = stderr(), paste0("error ttest estimation of in i=",i," j=",j,"\n"))
#cat(file = stderr(), paste0("error message =",cond,"\n"))
d$mat_p[i,j] = 1
d$mat_t[i,j] = 0
},
warning= function(cond){
#cat(file = stderr(), paste0("warning ttest estimation of in i=",i," j=",j,"\n"))
#cat(file = stderr(), paste0("warning message =",cond,"\n"))
d$mat_p[i,j] = 1
d$mat_t[i,j] = 0
})
}
}
}
View(d)
d$mat_p
d$mat_t
if(!(method=="Granger")){
d$mat_p[lower.tri(d$mat_p)]<-d$mat_p[upper.tri(d$mat_p)]
d$mat_t[lower.tri(d$mat_t)]<-d$mat_t[upper.tri(d$mat_t)]
}
}
colnames(d$mat_p) = regions
rownames(d$mat_p) = regions
colnames(d$mat_t) = regions
rownames(d$mat_t) = regions
regions = HD1$uregion_list
if(!(method=="Granger")){
d$mat_p[lower.tri(d$mat_p)]<-d$mat_p[upper.tri(d$mat_p)]
d$mat_t[lower.tri(d$mat_t)]<-d$mat_t[upper.tri(d$mat_t)]
}
}
colnames(d$mat_p) = regions
rownames(d$mat_p) = regions
colnames(d$mat_t) = regions
rownames(d$mat_t) = regions
d$mat_p
source('G:/Programming/dataVis/app/functions/get_data.R')
runTests('app')
runApp('app')
runTests('app')
runApp('app')
View(glob_mat_p)
View(glob_mat_t)
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp('app')
View(glob_d)
glob_d$data1[1,1,2]
glob_d$data1[1,1,3]
glob_d$data1[2,1,3]
glob_d$data1[3,1,3]
glob_d$data1[4,1,3]
glob_d$data1[5,1,3]
sum(glob_d$data1[5,1,])
sum(glob_d$data1[5,,])
sum(glob_d$data1[\,,])
sum(glob_d$data1[,,])
sum(glob_d$data2[,,])
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp('app')
View(glob_d1)
glob_d1$data1
glob_d1$data2
glob_d1$data1
glob_d1$data2
glob_d1$data1
glob_d2$data1
glob_d1$data1
glob_d2$data1
glob_d1$data1
glob_d2$data1
glob_d1$data1
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp('app')
View(glob_HD1)
glob_HD1$mdat[1,1:3,1:3,1,1]
glob_HD2$mdat[1,1:3,1:3,1,1]
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp('app')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/functions/get_data.R')
runApp('app')
source('G:/Programming/dataVis/app/functions/get_data.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
View(glob_text_d)
identical(glob_text_d, glob_hist_d)
G = glob_text_d
dat1 = G$data1
dat2 = G$data2
x = dat1[,88,77]
y = dat2[,88,77]
x
mean(x)
mean(y)
runApp('app')
runApp('app')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
source('G:/Programming/dataVis/app/modules/longitudinal_group_trials_plot.R')
runApp('app')
