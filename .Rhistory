runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runTests("app", filter = "testthat")
runTests("app", filter = "testthat")
s1 = "lsadfjsdljf_to"
mystring = "lsadfjsdljf_to"
str_sub(mystring,-3,-1)=="_to"
str_sub(mystring,-5,-1)=="_from"
mystring = "lsadfjsdljf_from"
str_sub(mystring,-5,-1)=="_from"
str_sub(mystring,1,-6)
x = 1
y = 2
z = c("1", "2")
l = list("mean"=x, "std" = y, "var"=z)
l
l$mean
l$std
l$var
class(l$var)
class(l$mean)
x = matrix(runif(100),nrow = 10 )
l = list("mean"=x, "std" = y, "var"=z)
class(l$mean)
library(data.table)
library(tidyverse)
D3<-fread('./preprocessing/export_table_coh_old_mag.csv', header = TRUE, sep = ',', check.names = FALSE)
colnames(D3)
library(tidyverse)
D3<-fread('./preprocessing/export_table_coh_old_mag.csv', header = TRUE, sep = ',', check.names = FALSE)
D3 <- D3 %>% select(-contains("parietooccipital_central_from>"))
D3 <- D3 %>% select(-contains(">parietooccipital_central_from"))
D3 <- D3 %>% select(-contains("parietooccipital_cen>"))
D3 <- D3 %>% select(-contains(">parietooccipital_cen"))
D3 <- D3 %>% select(-contains("frontal_links_from>"))
D3 <- D3 %>% select(-contains(">frontal_links_from"))
D3 <- D3 %>% select(-contains("frontal_rechts_from>"))
D3 <- D3 %>% select(-contains(">frontal_rechts_from"))
D3 <- D3 %>% select(-contains("frontocentral_l_from>"))
D3 <- D3 %>% select(-contains(">frontocentral_l_from"))
D3 <- D3 %>% select(-contains("frontocentral_r_from>"))
D3 <- D3 %>% select(-contains(">frontocentral_r_from"))
D3 <- D3 %>% select(-contains("temporal_links_from>"))
D3 <- D3 %>% select(-contains(">temporal_links_from"))
D3 <- D3 %>% select(-contains("temporal_rechts_from>"))
D3 <- D3 %>% select(-contains(">temporal_rechts_from"))
D3 <- D3 %>% select(-contains("parietal_links_from>"))
D3 <- D3 %>% select(-contains(">parietal_links_from"))
D3 <- D3 %>% select(-contains("parietal_rechts_from>"))
D3 <- D3 %>% select(-contains(">parietal_rechts_from"))
D3 <- D3 %>% select(-contains("parietooccipital_l_from>"))
D3 <- D3 %>% select(-contains(">parietooccipital_l_from"))
D3 <- D3 %>% select(-contains("parietooccipital_r_from>"))
D3 <- D3 %>% select(-contains(">parietooccipital_r_from"))
D3 <- D3 %>% select(-contains("1."))
D3 <- D3 %>% select(-contains("2."))
D3 <- D3 %>% select(-contains("3."))
D3 <- D3 %>% select(-contains("4."))
D3 <- D3 %>% select(-contains("5."))
D3 <- D3 %>% select(-contains("6."))
D3 <- D3 %>% select(-contains("7."))
D3 <- D3 %>% select(-contains("8."))
D3 <- D3 %>% select(-contains("9."))
D3 <- D3 %>% select(-contains("10."))
D3 <- D3 %>% select(-contains("20."))
D3 <- D3 %>% select(-contains("30."))
D3 <- D3 %>% select(-contains("40."))
D3 <- D3 %>% select(-contains("8832"))
D3 <- D3 %>% select(-contains("9344"))
D3 <- D3 %>% select(-contains("12928"))
D3 <- D3 %>% select(-contains("13440"))
D3 <- D3 %>% select(-contains("13952"))
D3 <- D3 %>% select(-contains("14464"))
D3 <- D3 %>% select(-contains("29824"))
D3 <- D3 %>% select(-contains("30336"))
colnames(D3)
D3 <- D3 %>% select(-contains("parietooccipital_central_from>"))
D3 <- D3 %>% select(-contains(">parietooccipital_central_from"))
D3 <- D3 %>% select(-contains("parietooccipital_cen>"))
D3 <- D3 %>% select(-contains(">parietooccipital_cen"))
D3 <- D3 %>% select(-contains("frontal_left_from>"))
D3 <- D3 %>% select(-contains(">frontal_left_from"))
D3 <- D3 %>% select(-contains("frontal_right_from>"))
D3 <- D3 %>% select(-contains(">frontal_right_from"))
D3 <- D3 %>% select(-contains("frontocentral_l_from>"))
D3 <- D3 %>% select(-contains(">frontocentral_l_from"))
D3 <- D3 %>% select(-contains("frontocentral_r_from>"))
D3 <- D3 %>% select(-contains(">frontocentral_r_from"))
D3 <- D3 %>% select(-contains("temporal_links_from>"))
D3 <- D3 %>% select(-contains(">temporal_links_from"))
D3 <- D3 %>% select(-contains("temporal_rechts_from>"))
D3 <- D3 %>% select(-contains(">temporal_rechts_from"))
D3 <- D3 %>% select(-contains("parietal_left_from>"))
D3 <- D3 %>% select(-contains(">parietal_left_from"))
D3 <- D3 %>% select(-contains("parietal_right_from>"))
D3 <- D3 %>% select(-contains(">parietal_right_from"))
D3 <- D3 %>% select(-contains("parietooccipital_l_from>"))
D3 <- D3 %>% select(-contains(">parietooccipital_l_from"))
D3 <- D3 %>% select(-contains("parietooccipital_r_from>"))
D3 <- D3 %>% select(-contains(">parietooccipital_r_from"))
D3 <- D3 %>% select(-contains("parieto_occ_l_from>"))
D3 <- D3 %>% select(-contains(">parieto_occ_l_from"))
D3 <- D3 %>% select(-contains("parieto_occ_r_from>"))
D3 <- D3 %>% select(-contains(">parieto_occ_r_from"))
D3 <- D3 %>% select(-contains("1."))
D3 <- D3 %>% select(-contains("2."))
D3 <- D3 %>% select(-contains("3."))
D3 <- D3 %>% select(-contains("4."))
D3 <- D3 %>% select(-contains("5."))
D3 <- D3 %>% select(-contains("6."))
D3 <- D3 %>% select(-contains("7."))
D3 <- D3 %>% select(-contains("8."))
D3 <- D3 %>% select(-contains("9."))
D3 <- D3 %>% select(-contains("10."))
D3 <- D3 %>% select(-contains("20."))
D3 <- D3 %>% select(-contains("30."))
D3 <- D3 %>% select(-contains("40."))
D3 <- D3 %>% select(-contains("8832"))
D3 <- D3 %>% select(-contains("9344"))
D3 <- D3 %>% select(-contains("12928"))
D3 <- D3 %>% select(-contains("13440"))
D3 <- D3 %>% select(-contains("13952"))
D3 <- D3 %>% select(-contains("14464"))
D3 <- D3 %>% select(-contains("29824"))
D3 <- D3 %>% select(-contains("30336"))
colnames(D3)
library(data.table)
library(reshape2)
D <- read.csv("./data/Behavioral/Tipp10_Auswertung3.csv", header = TRUE, sep = ";", check.names = FALSE)
# my_data %>% select(ends_with("Width"))
#
# # Select columns whose names contains "etal"
# my_data %>% select(contains("etal"))
#
# # Select columns whose name maches a regular expression
# my_data %>% select(matches(".t."))
#
# # selects variables provided in a character vector.
# my_data %>% select(one_of(c("Sepal.Length", "Petal.Length")))
measurement_seperator = '__'
get_columnnames_by_pattern<- function(df, pattern){
cn = colnames(df)
ret = grep(pattern,cn, value = TRUE)
return(ret)
}
outcome_var_pattern = "Tippfehler"
outcome_var_pattern = "Anzahl_Richtige"
df <- melt(data = D, id.vars = c("ID","ToInclude","Lektion"),
measure.vars = get_columnnames_by_pattern(D, outcome_var_pattern),
variable_name = "var_names"
)
# exlude those not to include
df <- subset(df, ToInclude==1)
df <- cbind(df, colsplit(df$var_names, "__", names= c(outcome_var_pattern, "Test_number")))
newModel <- lm(Test_number ~ value, data = df, na.action = na.exclude)
summary(newModel)
D <- read.csv("./data/Behavioral/Tipp10_Auswertung.csv", header = TRUE, sep = ";", check.names = FALSE)
View(D)
colnames(D)
colnames(D)[1]
D <- read.csv("./data/Behavioral/Tipp10_Auswertung3.csv", header = TRUE, sep = ";", check.names = FALSE)
# my_data %>% select(ends_with("Width"))
#
# # Select columns whose names contains "etal"
# my_data %>% select(contains("etal"))
#
# # Select columns whose name maches a regular expression
# my_data %>% select(matches(".t."))
#
# # selects variables provided in a character vector.
# my_data %>% select(one_of(c("Sepal.Length", "Petal.Length")))
measurement_seperator = '__'
get_columnnames_by_pattern<- function(df, pattern){
cn = colnames(df)
ret = grep(pattern,cn, value = TRUE)
return(ret)
}
outcome_var_pattern = "Tippfehler"
outcome_var_pattern = "Anzahl_Richtige"
df <- melt(data = D, id.vars = c("ID","ToInclude","Lektion"),
measure.vars = get_columnnames_by_pattern(D, outcome_var_pattern),
variable_name = "var_names"
)
# exlude those not to include
df <- subset(df, ToInclude==1)
df <- cbind(df, colsplit(df$var_names, "__", names= c(outcome_var_pattern, "Test_number")))
View(df)
outcome_var_pattern = "Anzahl_Richtige"
df <- melt(data = D, id.vars = c("ID","ToInclude","Lektion"),
measure.vars = get_columnnames_by_pattern(D, outcome_var_pattern),
variable_name = "var_names"
)
# exlude those not to include
df <- subset(df, ToInclude==1)
df <- cbind(df, colsplit(df$var_names, "__", names= c(outcome_var_pattern, "Test_number")))
outcome_var_pattern = "Tippfehler"
df <- melt(data = D, id.vars = c("ID","ToInclude","Lektion"),
measure.vars = get_columnnames_by_pattern(D, outcome_var_pattern),
variable_name = "var_names"
)
# exlude those not to include
df <- subset(df, ToInclude==1)
df <- cbind(df, colsplit(df$var_names, "__", names= c(outcome_var_pattern, "Test_number")))
View(myTabPlots)
View(df)
View(df)
outcome_var_pattern = "Anzahl_Richtige"
df <- melt(data = D, id.vars = c("ID","ToInclude","Lektion"),
measure.vars = get_columnnames_by_pattern(D, outcome_var_pattern),
variable_name = "var_names"
)
# exlude those not to include
df <- subset(df, ToInclude==1)
df <- cbind(df, colsplit(df$var_names, "__", names= c(outcome_var_pattern, "Test_number")))
colsplit(df$variable, "__", names = c("Anzahl_Richtige", "Test_number"))
df <- melt(data = D, id.vars = c("ID","ToInclude","Lektion"),
measure.vars = get_columnnames_by_pattern(D, outcome_var_pattern)
)
df <- cbind(df, colsplit(df$variable, "__", names= c(outcome_var_pattern, "Test_number")))
# exlude those not to include
df <- subset(df, ToInclude==1)
df <- cbind(df, colsplit(df$variable, "__", names= c(outcome_var_pattern, "Test_number")))
df <- melt(data = D, id.vars = c("ID","ToInclude","Lektion"),
measure.vars = get_columnnames_by_pattern(D, outcome_var_pattern)
)
# exlude those not to include
df <- subset(df, ToInclude==1)
df <- cbind(df, colsplit(df$variable, "__", names= c(outcome_var_pattern, "Test_number")))
newModel <- lm(Test_number ~ value, data = df, na.action = na.exclude)
summary(newModel)
source('G:/Programming/dataVis/data/Behavioral/behavioral.R', encoding = 'UTF-8')
library(shiny)
startApp('app')
runApp('app')
runApp('app')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
runApp('app')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
runApp('app')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
runApp('app')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
runApp('app')
plot(c(1,2),c(3,4))
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
runApp('app')
runApp('app')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
runApp('app')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
runApp('app')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
runApp('app')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
runApp('app')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
runApp('app')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
runApp('app')
source('G:/Programming/dataVIS/app/modules/compare_trials_plot.R')
tab_coh = read.csv(file = "./preprocessing/Stefanslabel_210105/export_table_coh.csv", sep = ',', header = TRUE, check.names = FALSE)
View(tab_coh)
tab_coh = read.csv(file = "./preprocessing/Stefanslabel_210105/export_table_freq.csv", sep = ',', header = TRUE, check.names = FALSE)
tab_coh = read.csv(file = "./preprocessing/Stefanslabel_210105/export_table_granger.csv", sep = ',', header = TRUE, check.names = FALSE)
tab_coh = read.csv(file = "./preprocessing/Stefanslabel_210105/export_table_subjects.csv", sep = ',', header = TRUE, check.names = FALSE)
tab_coh = read.csv(file = "./preprocessing/Stefanslabel_210105/export_table_granger.csv", sep = ',', header = TRUE, check.names = FALSE)
tab_coh = read.csv(file = "./preprocessing/Stefanslabel_210105/export_table_freq.csv", sep = ',', header = TRUE, check.names = FALSE)
install.packages("rjson")
library("rjson")
result <- fromJSON(file = "./preprocessing/Stefanslabel_210105/export_timelock.json")
View(rresult)
View(result)
result$subjects_id
result$channels
result$time
result$trials
result$type
result$data
result$data[1]
dim(result$data[1])
class(result$data)
class(result$data[1])
runApp('app')
library(data.table)
library(reshape2)
D <- read.csv("./data/Behavioral/Tipp10_Auswertung3.csv", header = TRUE, sep = ";", check.names = FALSE)
# my_data %>% select(ends_with("Width"))
#
# # Select columns whose names contains "etal"
# my_data %>% select(contains("etal"))
#
# # Select columns whose name maches a regular expression
# my_data %>% select(matches(".t."))
#
# # selects variables provided in a character vector.
# my_data %>% select(one_of(c("Sepal.Length", "Petal.Length")))
measurement_seperator = '__'
get_columnnames_by_pattern<- function(df, pattern){
cn = colnames(df)
ret = grep(pattern,cn, value = TRUE)
return(ret)
}
outcome_var_pattern = "Tippfehler"
outcome_var_pattern = "Anzahl_Richtige"
df <- melt(data = D, id.vars = c("ID","ToInclude","Lektion"),
measure.vars = get_columnnames_by_pattern(D, outcome_var_pattern)
)
# exlude those not to include
df <- subset(df, ToInclude==1)
df <- cbind(df, colsplit(df$variable, "__", names= c(outcome_var_pattern, "Test_number")))
newModel <- lm(Test_number ~ value, data = df, na.action = na.exclude)
summary(newModel)
new_id <- c()
new_val<- c()
new_varname <-c()
new_testnumber<-c()
outcome_var_pattern_to_add = "Start0Middel1Abschluss2"
cn = colnames(df)
#Offline learning
for (row in 1:nrow(df)){
test_num = df$Test_number[row]
myid = df$ID[row]
mycolname = paste0(outcome_var_pattern_to_add,"__", test_num)
# was steht in der Start0Middel1Abchluss2__X des entsprechenden Tests in der Orginaltabelle?
sma = D[which(D$ID == myid), mycolname]
if (sma == 2){
Tag_end_value = df[row, "value"]
}
# wenn es sich um den ersten Test des Tages handelt und es nicht der erste Test ist
if (sma==0 && test_num>1){
Tag_start_value = df[row, "value"]
offline_learning = Tag_start_value - Tag_end_value
new_id        <- c(new_id, myid)
new_val       <- c(new_val, offline_learning)
new_varname   <- c(new_varname, df[row, "var_names"])
new_testnumber<- c(new_testnumber, test_num)
}
# wir wollen offline learning d.h. wir wollen v=0 und ziehen davon v2 des vortages ab
}
new_df <- data.frame(new_id, new_val, new_varname, new_testnumber)
S <- read.spss("./data/Behavioral/Table_TAB.sav", header = TRUE, sep = ";", check.names = FALSE)
library(foreign)
S <- read.spss("./data/Behavioral/Table_TAB.sav", use.value.label=TRUE, to.data.frame = TRUE)
S <- read.spss("./data/Behavioral/Table_TAP.sav", use.value.label=TRUE, to.data.frame = TRUE)
View(S)
class(S$NHPT[1])
source('G:/Programming/dataVIS/data/Behavioral/behavioral.R', encoding = 'UTF-8')
library(shiny)
runApp('app')
result <- fromJSON(file = "../dataVISold/preprocessing/Stefanslabel_210105/export_timelock.json")
result <- fromJSON(file = "../dataVISold/preprocessing/Stefanslabel_210105/export_timelock.json")
result <- fromJSON(file = "./../dataVISold/preprocessing/Stefanslabel_210105/export_timelock.json")
library(rjson)
result <- fromJSON(file = "./../dataVISold/preprocessing/Stefanslabel_210105/export_timelock.json")
View(result)
View(result)
runApp('app')
install.packages(ShinyFiles)
install.packages(shinyFiles)
install.packages('shinyFiles')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
home = getwd()
parseFilePaths(home,"documentation")
parseDirPaths(home,"documentation")
parseDirPath(home,"documentation")
runApp('app')
runApp('app')
l  = c(1,2,3)
l[1]
l[-1]
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
getVolumes()
x = getVolumes()
x
runApp('app')
runApp('app')
runApp('app')
runApp('app')
l = list()
l$val = 1
runApp('app')
runApp('app')
runApp('app')
normalizePath('~')
normalizePath('Dieser PC')
normalizePath('/')
drive_get()
normalizePath('G:')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
\
disks <- system("wmic logicaldisk")
View(disks)
disks <- system("wmic logicaldisk get caption")
disks
disks <- system("wmic logicaldisk get caption", inter = TRUE)
class(disks)
length(disks)
d <-disks[2:length(disks)-1]
d
d <-disks[2:length(disks)-1,]
d <-disks[1]
disks[1]
disks <- read.fwf(textConnection(disks[1:(length(disks)-1)]),
widths=c(9, 13, 13), strip.white=TRUE, stringsAsFactors=FALSE)
disks
disks <- read.fwf(textConnection(disks[2:(length(disks)-1)]),
widths=c(9, 13, 13), strip.white=TRUE, stringsAsFactors=FALSE)
d <- read.fwf(textConnection(disks[2:(length(disks)-1)]),
widths=c(9, 13, 13), strip.white=TRUE, stringsAsFactors=FALSE)
disks <- read.fwf(textConnection(disks[2:(length(disks)-1)]),
widths=c(9, 13, 13), strip.white=TRUE, stringsAsFactors=FALSE)
disks <- read.fwf(textConnection(disks[1:(length(disks)-1)]),
widths=c(9, 13, 13), strip.white=TRUE, stringsAsFactors=FALSE)
disks <- read.fwf(textConnection(disks[1:(length(disks)-1)]),
widths=c(9, 13, 13), strip.white=TRUE, stringsAsFactors=FALSE)
disks <- system("wmic logicaldisk get caption", inter = TRUE)
d <- read.fwf(textConnection(disks[2:(length(disks)-1)]),
widths=c(9, 13, 13), strip.white=TRUE, stringsAsFactors=FALSE)
d
d <- read.fwf(textConnection(disks[2:(length(disks)-1)]),
widths=c(4), strip.white=TRUE, stringsAsFactors=FALSE)
d
l = list()
c(l,"my1"=1)
c(l,"my2"=3)
runApp('app')
runApp('app')
d
names(d) = d$V1
length(d)
length(d$V1)
mylist = d$V1
mylist
class(mylist)
names(mylist) <- mylist
mylist
class(mylist)
mylist[1]
runApp('app')
runApp('app')
runApp('app')
runApp('app')
library(rjson)
results = fromJSON(file = "../dataVisdata/stefanTest/export_freq.json")
View(results)
S = fromJSON(file = "../dataVisdata/stefanTest/export_freq.json")
S$subjects_id
S$trials
S$data
S = fromJSON(file = "../dataVisdata/stefanTest/export_conn_granger.json")
S
View(S)
S$channelcmb
source('G:/Programming/dataVIS/app/functions/preprocess_data2.R')
beha = read.csv('./stefanTest/behavioral_data_20201209.csv', header = TRUE, check.names = FALSE, sep = ';')
class(beha)
data = fromJSON(file = "./stefanTest/export_conn_coh.json")
View(data)
class(data$subjects_id)
tbl_beh_tmp <- beha[beha$ID %in% data$subjects_id,]
tbl_beh_tmp
View(tbl_beh_tmp)
View(tbl_beh_tmp)
