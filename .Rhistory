title="Significance Matrix",
caption="handmade with ggplot2") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=45, vjust=0.9, hjust=1.0),
axis.text.y=element_text(size=9),
plot.title=element_text(size=12)) +
geom_point(data = dflt, aes(x = dflt$Var1, y= dflt$Var2,colour = dflt$sig_level),
size = 12,
alpha = 0.5,
stat = "identity",
#position='stack',
show.legend = TRUE)+
scale_color_manual(name = "value",
values = c("red", "yellow", "green", "black", "black", "black"))+
geom_text(aes(label= ifelse(value<0.05, sprintf("%0.3f", round(value,digits =3)),"")),
hjust=0.5, vjust=0.5, size = 3,
stat = "identity")+
geom_abline(slope = 1, intercept = 0) +
scale_y_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL) +
scale_x_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL)
View(df)
View(df2)
View(dflt)
View(df)
ggplot(df, aes(x = Var1, y = Var2)) +
#geom_raster(aes(fill=value)) +
#scale_fill_gradient(low="grey90", high="red") +
labs(x="",
y="",
title="Significance Matrix",
caption="handmade with ggplot2") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=45, vjust=0.9, hjust=1.0),
axis.text.y=element_text(size=9),
plot.title=element_text(size=12)) +
geom_point(data = dflt, aes(x = dflt$Var1, y= dflt$Var2,colour = dflt$sig_level),
size = 12,
alpha = 0.5,
stat = "identity",
#position='stack',
show.legend = TRUE)+
scale_color_manual(name = "value",
values = c("red", "yellow", "green", "black", "black", "black"))+
geom_text(aes(label= ifelse(value<0.05, sprintf("%0.3f", round(value,digits =3)),"")),
hjust=0.5, vjust=0.5, size = 3,
stat = "identity")+
geom_abline(slope = 1, intercept = 0) +
scale_y_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL) +
scale_x_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL)
ggplot(df, aes(x = Var1, y = Var2)) +
#geom_raster(aes(fill=value)) +
#scale_fill_gradient(low="grey90", high="red") +
labs(x="",
y="",
title="Significance Matrix",
caption="handmade with ggplot2") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=45, vjust=0.9, hjust=1.0),
axis.text.y=element_text(size=9),
plot.title=element_text(size=12)) +
geom_point(data = dflt, aes(x = dflt$Var1, y= dflt$Var2,colour = dflt$sig_level),
size = 12,
alpha = 0.5,
stat = "identity",
#position='stack',
show.legend = TRUE)+
scale_color_manual(name = "value",
values = c("white", "green", "yellow", "orange", "red", "black"))+
geom_text(aes(label= ifelse(value<0.05, sprintf("%0.3f", round(value,digits =3)),"")),
hjust=0.5, vjust=0.5, size = 3,
stat = "identity")+
geom_abline(slope = 1, intercept = 0) +
scale_y_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL) +
scale_x_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL)
ggplot(df, aes(x = Var1, y = Var2)) +
#geom_raster(aes(fill=value)) +
#scale_fill_gradient(low="grey90", high="red") +
labs(x="",
y="",
title="Significance Matrix",
caption="handmade with ggplot2") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=45, vjust=0.9, hjust=1.0),
axis.text.y=element_text(size=9),
plot.title=element_text(size=12)) +
geom_point(data = dflt, aes(x = dflt$Var1, y= dflt$Var2,colour = dflt$sig_level),
size = 12,
alpha = 0.5,
stat = "identity",
#position='stack',
show.legend = TRUE)+
scale_color_manual(name = "value",
values = c("white", "green", "yellow", "red", "pink", "black"))+
geom_text(aes(label= ifelse(value<0.05, sprintf("%0.3f", round(value,digits =3)),"")),
hjust=0.5, vjust=0.5, size = 3,
stat = "identity")+
geom_abline(slope = 1, intercept = 0) +
scale_y_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL) +
scale_x_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL)
ggplot(df, aes(x = Var1, y = Var2)) +
#geom_raster(aes(fill=value)) +
#scale_fill_gradient(low="grey90", high="red") +
labs(x="",
y="",
title="Significance Matrix",
caption="handmade with ggplot2") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=45, vjust=0.9, hjust=1.0),
axis.text.y=element_text(size=9),
plot.title=element_text(size=12)) +
geom_point(data = dflt, aes(x = dflt$Var1, y= dflt$Var2,colour = dflt$sig_level),
size = 12,
alpha = 0.5,
stat = "identity",
#position='stack',
show.legend = FALSE)+
scale_color_manual(name = "value",
values = c("white", "green", "yellow", "red", "pink", "black"))+
geom_text(aes(label= ifelse(value<0.05, sprintf("%0.3f", round(value,digits =3)),"")),
hjust=0.5, vjust=0.5, size = 3,
stat = "identity")+
geom_abline(slope = 1, intercept = 0) +
scale_y_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL) +
scale_x_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL)
ggplot(df, aes(x = Var1, y = Var2)) +
#geom_raster(aes(fill=value)) +
#scale_fill_gradient(low="grey90", high="red") +
labs(x="",
y="",
title="Significance Matrix",
caption="handmade with ggplot2") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=45, vjust=0.9, hjust=1.0),
axis.text.y=element_text(size=9),
plot.title=element_text(size=12)) +
geom_point(data = dflt, aes(x = dflt$Var1, y= dflt$Var2,colour = dflt$sig_level),
size = 12,
alpha = 0.5,
stat = "identity",
#position='stack',
show.legend = TRUE
)+
scale_color_manual(name = "value",
values = c("white", "green", "yellow", "red"   , "pink", "black"),
labels = c(">0.05", "<0.05", "<0.01" , "<0.001", "<0.0001", "not existent"))+
geom_text(aes(label= ifelse(value<0.05, sprintf("%0.3f", round(value,digits =3)),"")),
hjust=0.5, vjust=0.5, size = 3,
stat = "identity")+
geom_abline(slope = 1, intercept = 0) +
scale_y_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL) +
scale_x_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL)
ggplot(df, aes(x = Var1, y = Var2)) +
#geom_raster(aes(fill=value)) +
#scale_fill_gradient(low="grey90", high="red") +
labs(x="",
y="",
title="Significance Matrix",
caption="handmade with ggplot2") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=45, vjust=0.9, hjust=1.0),
axis.text.y=element_text(size=9),
plot.title=element_text(size=12)) +
geom_point(data = dflt, aes(x = dflt$Var1, y= dflt$Var2,colour = dflt$sig_level),
size = 12,
alpha = 0.5,
stat = "identity",
#position='stack',
show.legend = TRUE
)+
scale_color_manual(name = "valuey",
values = c("white", "green", "yellow", "red"   , "pink", "black"),
labels = c(">0.05", "<0.05", "<0.01" , "<0.001", "<0.0001", "not existent"))+
geom_text(aes(label= ifelse(value<0.05, sprintf("%0.3f", round(value,digits =3)),"")),
hjust=0.5, vjust=0.5, size = 3,
stat = "identity")+
geom_abline(slope = 1, intercept = 0) +
scale_y_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL) +
scale_x_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL)
ggplot(df, aes(x = Var1, y = Var2)) +
#geom_raster(aes(fill=value)) +
#scale_fill_gradient(low="grey90", high="red") +
labs(x="",
y="",
title="Significance Matrix",
caption="handmade with ggplot2") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=45, vjust=0.9, hjust=1.0),
axis.text.y=element_text(size=9),
plot.title=element_text(size=12)) +
geom_point(data = dflt, aes(x = dflt$Var1, y= dflt$Var2,colour = dflt$sig_level),
size = 12,
alpha = 0.5,
stat = "identity",
#position='stack',
show.legend = TRUE
)+
scale_color_manual(name = "p-value coding",
values = c("white", "green", "yellow", "red"   , "pink", "black"),
labels = c(">0.05", "<0.05", "<0.01" , "<0.001", "<0.0001", "not existent"))+
geom_text(aes(label= ifelse(value<0.05, sprintf("%0.3f", round(value,digits =3)),"")),
hjust=0.5, vjust=0.5, size = 3,
stat = "identity")+
geom_abline(slope = 1, intercept = 0) +
scale_y_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL) +
scale_x_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL)
ggplot(df, aes(x = Var1, y = Var2)) +
#geom_raster(aes(fill=value)) +
#scale_fill_gradient(low="grey90", high="red") +
labs(x="",
y="",
title="Significance Matrix",
caption="handmade with ggplot2") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=45, vjust=0.9, hjust=1.0),
axis.text.y=element_text(size=9),
plot.title=element_text(size=12)) +
geom_point(data = dflt, aes(x = dflt$Var1, y= dflt$Var2,colour = dflt$sig_level),
size = 12,
alpha = 0.5,
stat = "identity",
#position='stack',
show.legend = TRUE
)+
scale_color_manual(name = "p-value coding",
values = c("white", "green", "yellow", "red"   , "pink", "black"),
labels = c(">0.05", "<0.05", "<0.01" , "<0.001", "<0.0001", "not existent"))+
geom_text(data = dflt, aes(label= ifelse(value<0.05, sprintf("%0.3f", round(value,digits =3)),"")),
hjust=0.5, vjust=0.5, size = 3,
stat = "identity")+
geom_abline(slope = 1, intercept = 0) +
scale_y_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL) +
scale_x_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL)
ggplot(df, aes(x = Var1, y = Var2)) +
#geom_raster(aes(fill=value)) +
#scale_fill_gradient(low="grey90", high="red") +
labs(x="",
y="",
title="Significance Matrix",
caption="handmade with ggplot2") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=45, vjust=0.9, hjust=1.0),
axis.text.y=element_text(size=9),
plot.title=element_text(size=12),
aspect.ratio = 1) +
geom_point(data = dflt, aes(x = dflt$Var1, y= dflt$Var2,colour = dflt$sig_level),
size = 12,
alpha = 0.5,
stat = "identity",
#position='stack',
show.legend = TRUE
)+
scale_color_manual(name = "p-value coding",
values = c("white", "green", "yellow", "red"   , "pink", "black"),
labels = c(">0.05", "<0.05", "<0.01" , "<0.001", "<0.0001", "not existent"))+
geom_text(data = dflt, aes(label= ifelse(value<0.05, sprintf("%0.3f", round(value,digits =3)),"")),
hjust=0.5, vjust=0.5, size = 3,
stat = "identity")+
geom_abline(slope = 1, intercept = 0) +
scale_y_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL) +
scale_x_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL)
mat_p <- matrix(runif(196,0,0.1),nrow=14)
mat_t <- matrix(runif(196,0,10),nrow=14)
names <- c("frontal_right_A1",
"frontal_right_B2",
"frontal_right_A3",
"frontal_right_A4",
"frontal_right_A5",
"frontal_right_A6",
"frontal_right_A7",
"frontal_right_A8",
"frontal_right_A9",
"frontal_right_A10",
"frontal_right_A11",
"frontal_right_A12",
"frontal_right_A13",
"frontal_right_A14"
)
A <- mat_p
Alt_b = lower.tri(A, diag = FALSE)
Aut_b = upper.tri(A, diag = FALSE)
Alt <- A[Alt_b]
Aut <- A[Aut_b]
df_tval <- melt(mat_t)
df<-melt(A)
df$t_val <- df_tval$value
tmp <- as.character(df$value)
tmp[df$value<3]="1"
tmp[df$value<0.05]="2"
tmp[df$value<0.01]="3"
tmp[df$value<0.001]="4"
tmp[df$value<0.0001]="5"
# tmp[df$value<3]="pval >0.5"
# tmp[df$value<0.05]="0.01 < pval <= 0.05"
# tmp[df$value<0.01]="0.001 < pval <= 0.01"
# tmp[df$value<0.001]="0.0001 < pval <= 0.001"
# tmp[df$value<0.0001]="pval <= 0.0001"
sig_level = tmp
df$sig_level = tmp
df$lt<-melt(Alt_b)
df$ut<-melt(Aut_b)
#dflt <- df[df[,"lt.value"]==TRUE, ]
#df<-as_tibble(df)
dflt <- df %>% filter(lt$value==TRUE)
dfut <- df %>% filter(ut$value==TRUE)
View(df)
library(shiny)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
library(reshape2)
library(ggplot2)
library(tidyverse)
mat_p <- matrix(runif(196,0,0.1),nrow=14)
mat_t <- matrix(runif(196,0,10),nrow=14)
names <- c("frontal_right_A1",
"frontal_right_B2",
"frontal_right_A3",
"frontal_right_A4",
"frontal_right_A5",
"frontal_right_A6",
"frontal_right_A7",
"frontal_right_A8",
"frontal_right_A9",
"frontal_right_A10",
"frontal_right_A11",
"frontal_right_A12",
"frontal_right_A13",
"frontal_right_A14"
)
A <- mat_p
Alt_b = lower.tri(A, diag = FALSE)
Aut_b = upper.tri(A, diag = FALSE)
Alt <- A[Alt_b]
Aut <- A[Aut_b]
df_tval <- melt(mat_t)
df<-melt(A)
df$t_val <- df_tval$value
tmp <- as.character(df$value)
tmp[df$value<3]="1"
tmp[df$value<0.05]="2"
tmp[df$value<0.01]="3"
tmp[df$value<0.001]="4"
tmp[df$value<0.0001]="5"
# tmp[df$value<3]="pval >0.5"
# tmp[df$value<0.05]="0.01 < pval <= 0.05"
# tmp[df$value<0.01]="0.001 < pval <= 0.01"
# tmp[df$value<0.001]="0.0001 < pval <= 0.001"
# tmp[df$value<0.0001]="pval <= 0.0001"
sig_level = tmp
df$sig_level = tmp
df$lt<-melt(Alt_b)
df$ut<-melt(Aut_b)
#dflt <- df[df[,"lt.value"]==TRUE, ]
#df<-as_tibble(df)
dflt <- df %>% filter(lt$value==TRUE)
dfut <- df %>% filter(ut$value==TRUE)
ggplot(df, aes(x = Var1, y = Var2)) +
#geom_raster(aes(fill=value)) +
#scale_fill_gradient(low="grey90", high="red") +
labs(x="",
y="",
title="Significance Matrix",
caption="handmade with ggplot2") +
theme_bw() + theme(axis.text.x=element_text(size=9, angle=45, vjust=0.9, hjust=1.0),
axis.text.y=element_text(size=9),
plot.title=element_text(size=12),
aspect.ratio = 1) +
geom_point(data = dflt, aes(x = dflt$Var1, y= dflt$Var2,colour = dflt$sig_level),
size = 12,
alpha = 0.5,
stat = "identity",
#position='stack',
show.legend = TRUE
)+
scale_color_manual(name = "p-value coding",
values = c("white", "green", "yellow", "red"   , "pink", "black"),
labels = c(">0.05", "<0.05", "<0.01" , "<0.001", "<0.0001", "not existent"))+
geom_text(data = dflt, aes(label= ifelse(value<0.05, sprintf("%0.3f", round(value,digits =3)),"")),
hjust=0.5, vjust=0.5, size = 3,
stat = "identity")+
geom_abline(slope = 1, intercept = 0) +
scale_y_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL) +
scale_x_continuous(breaks=seq(1, length(names), 1), labels = names, minor_breaks = NULL)
# axis(1, at=1:length(names), labels = letters[1:length(names)])
# axis(1, at=1:length(names), labels = letters[1:length(names)])
#gg<-gg + scale_x_continuous(breaks=seq(1, length(names), 1), labels = names)
# axis(1, at=1:length(names), labels = letters[1:length(names)])
#gg<-gg + scale_x_continuous(breaks=seq(1, length(names), 1), labels = names)
#gg +
length(names)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
library(shiny)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
method = "Coherence_L1"
uregion_list <<- readRDS(file.path("./data",method,"uregion_list.Rda"))
utrial_list <<- readRDS(file.path("./data",method,"utrial_list.Rda"))
ufreq_list <<- readRDS(file.path("./data",method,"ufreq_list.Rda"))
tbl_beh <<- readRDS(file.path("./data",method,"tbl_beh.Rda"))
uregion_list_L1 <<- readRDS(file.path("./data",method,"uregion_list.Rda"))
utrial_list_L1 <<- readRDS(file.path("./data",method,"utrial_list.Rda"))
ufreq_list_L1 <<- readRDS(file.path("./data",method,"ufreq_list.Rda"))
tbl_beh_L1 <<- readRDS(file.path("./data",method,"tbl_beh.Rda"))
method = "Coherence_L2"
uregion_list_L2 <<- readRDS(file.path("./data",method,"uregion_list.Rda"))
utrial_list_L2 <<- readRDS(file.path("./data",method,"utrial_list.Rda"))
ufreq_list_L2 <<- readRDS(file.path("./data",method,"ufreq_list.Rda"))
tbl_beh_L2 <<- readRDS(file.path("./data",method,"tbl_beh.Rda"))
View(tbl_beh_L1)
C = data.frame(tbl_beh_L1$Gruppe, tbl_beh_L1$ID)
C = data.frame(tbl_beh_L1$Gruppe, tbl_beh_L1$ID, tbl_beh_L2$ID, tbl_beh_L2$Gruppe)
View(C)
View(C)
data_L2 = readRDS(file.path("./data", "Coherence_L2", "tbl_data.Rda"))
data_L1 = readRDS(file.path("./data", "Coherence_L1", "tbl_data.Rda"))
data_L1[1,1,2,3,5]
data_L2[1,1,2,3,5]
data_L2[1,2,2,3,5]
data_L1[1,2,2,3,5]
data_L1[1,2,3,3,5]
data_L3[1,2,3,3,5]
data_L2[1,2,3,3,5]
data_L2[1,2,3,3,5]
source("./data/functions/get_data.R")
source("./functions/get_data.R")
g1_L1 <- get_data_group(data_L1, "Group0", beh = tbl_beh_L1, method = "Coherence")
g1_L2 <- get_data_group(data_L2, "Group0", beh = tbl_beh_L2, method = "Coherence")
m_L1 <- apply(g1_L1, c(2,3,4,5),mean)
m_L2 <- apply(g1_L2, c(2,3,4,5),mean)
m_L1[1,2,3,4]
m_L2[1,2,3,4]
beh_tbl_L1$Gruppe
tbl_beh_L1$Gruppe
tbl_beh_L2$Gruppe
b1 = tbl_beh_L1
b2 = tbl_beh_L2
b1[b1$Gruppe == 0]
b1g0 = b1[b1$Gruppe == 0]
b2g0 = b1[b2$Gruppe == 0]
View(b1g0)
b1g0 = b1[b1$Gruppe == 0,]
View(b1)
View(b1)
View(b2)
View(b2)
View(b1g0)
c = b1$Gruppe==0
View(C)
View(C)
View(C)
d = b1$Gruppe==0
View(d)
View(b1)
View(b2)
View(b1)
View(b2)
F = read.csv("./preprocessing/export_table_freq.csv", header = TRUE, sep = ',', check.names = FALSE)
View(`F`)
b1
View(b1)
View(b2)
View(b1)
F1g0 = F[b1$Gruppe == 0,]
F2g0 = F[b2$Gruppe == 0,]
F[1:24,1,1,1]
F[1,1,1,1]
f1_L2 <- get_data_group(dataF_L2, "Group0", beh = tbl_beh_L2, method = "Coherence")
View(`F`)
View(b1g0)
Fpre <- perform_preprocessing(b1,F,"tmp1", sdf)
F = read.csv("./preprocessing/export_table_freq.csv", header = TRUE, sep = ',', check.names = FALSE)
start_time <- Sys.time(); F = read.csv("./preprocessing/export_table_freq.csv", header = TRUE, sep = ',', check.names = FALSE); cat(Sys.time()-start_time)
start_time <- Sys.time(); Fx = scan("./preprocessing/export_table_freq.csv", header = TRUE, sep = ',', check.names = FALSE); cat(Sys.time()-start_time)
library(data.table)
start_time <- Sys.time(); Fx = fread("./preprocessing/export_table_freq.csv", header = TRUE, sep = ','); cat(Sys.time()-start_time)
View(Fx)
start_time <- Sys.time(); Fx = fread("./preprocessing/export_table_freq.csv", header = TRUE, sep = ',', check.names = FALSE); cat(Sys.time()-start_time)
start_time <- Sys.time(); CohT = fread("./preprocessing/export_table_coh.csv", header = TRUE, sep = ',', check.names = FALSE); cat(Sys.time()-start_time)
C_L1 <- perform_preprocessing(b1,CohT,"tmp1")
a1 = c(1, 2, 3, 4, 5)
a2 = c(6, 7, 8, 9, 10)
a3 = c(11, 12, 13, 14, 15)
aframe = data.frame(a1, a2, a3)
avector <- as.vector(aframe['a2'])
class(avector)
avector <- aframe[['a2']]
class(avector)
avector <- aframe[,2]
class(avector)
c(4,5,6,6)
class(c(4,5,6,6))
id_coh = CohT[['ID']]
id_beh = tbl_beh[['ID']]
id_coh
id_beh
id_beh = tbl_beh_L2[['ID']]
id_beh
B = read.csv("./preprocessing/table_behavioral_tmp.csv", header = TRUE, sep = ',', check.names = FALSE)
View(b1)
B = read.csv("./preprocessing/table_behavioral_tmp.csv", header = TRUE, sep = ',', check.names = FALSE)
B = read.csv("./preprocessing/table_behavioral_tmp.csv", header = TRUE, sep = ';', check.names = FALSE)
B = read.csv("./preprocessing/table_behavioral_tmp.csv", header = TRUE, sep = '|', check.names = FALSE)
tbl_beh_tmp <- B[B$ID %in% CohT$ID]
View(B)
tbl_beh_tmp <- B[B$ID %in% CohT$ID]
View(tbl_beh_tmp)
match(CohT, tbl_beh_tmp)
match(CohT$ID, tbl_beh_tmp$ID)
CohT$ID
bm <- tbl_beh_tmp[match(CohT$ID, tbl_beh_tmp$ID),]
View(bm)
library(shiny)
runApp('app')
library(shiny)
runApp('app')
